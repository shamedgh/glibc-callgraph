
;; Function _td_check_sizeof (_td_check_sizeof, funcdef_no=46, decl_uid=8766, cgraph_uid=46, symbol_order=48)

Partition 0: size 8 align 8
	descptr

;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7

;; Generating RTL for gimple basic block 8

;; Generating RTL for gimple basic block 9

;; Generating RTL for gimple basic block 10

;; Generating RTL for gimple basic block 11
Edge 2->11 redirected to 14
Edge 3->10 redirected to 15


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Redirecting jump 29 from 12 to 14.
Merging block 12 into block 11...
Merged blocks 11 and 12.
Merged 11 and 12 without moving.
Removing jump 61.
Merging block 15 into block 14...
Merged blocks 14 and 15.
Merged 14 and 15 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 10 NOTE_INSN_DELETED)
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (reg/v/f:DI 98 [ ta ])
        (reg:DI 5 di [ ta ])) fetch-value.c:26 -1
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 99 [ sizep ])
        (reg:DI 4 si [ sizep ])) fetch-value.c:26 -1
     (nil))
(insn 4 3 5 2 (set (reg/v:SI 100 [ sizep_name ])
        (reg:SI 1 dx [ sizep_name ])) fetch-value.c:26 -1
     (nil))
(note 5 4 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 5 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 99 [ sizep ]) [1 *sizep_9(D)+0 S4 A32])
            (const_int 0 [0]))) fetch-value.c:27 -1
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 70)
            (pc))) fetch-value.c:27 612 {*jcc_1}
     (int_list:REG_BR_PROB 6102 (nil))
 -> 70)
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (parallel [
            (set (reg:DI 101)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:30 -1
     (nil))
(insn 16 15 17 4 (set (reg:DI 102)
        (mem/f:DI (plus:DI (reg/v/f:DI 98 [ ta ])
                (const_int 16 [0x10])) [4 ta_11(D)->ph+0 S8 A64])) fetch-value.c:30 -1
     (nil))
(insn 17 16 18 4 (set (reg:DI 2 cx)
        (reg:DI 101)) fetch-value.c:30 -1
     (nil))
(insn 18 17 19 4 (set (reg:SI 1 dx)
        (reg/v:SI 100 [ sizep_name ])) fetch-value.c:30 -1
     (nil))
(insn 19 18 20 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x2b10707f2090 *.LC0>)) fetch-value.c:30 -1
     (nil))
(insn 20 19 21 4 (set (reg:DI 5 di)
        (reg:DI 102)) fetch-value.c:30 -1
     (nil))
(call_insn 21 20 22 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("td_mod_lookup") [flags 0x43]  <function_decl 0x2b107077d000 td_mod_lookup>) [0 td_mod_lookup S1 A8])
            (const_int 0 [0]))) fetch-value.c:30 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("td_mod_lookup") [flags 0x43]  <function_decl 0x2b107077d000 td_mod_lookup>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 22 21 23 4 (set (reg/v:SI 90 [ err ])
        (reg:SI 0 ax)) fetch-value.c:30 -1
     (nil))
(insn 23 22 24 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 90 [ err ])
            (const_int 5 [0x5]))) fetch-value.c:31 -1
     (nil))
(jump_insn 24 23 25 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 72)
            (pc))) fetch-value.c:31 612 {*jcc_1}
     (int_list:REG_BR_PROB 2800 (nil))
 -> 72)
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 90 [ err ])
            (const_int 0 [0]))) fetch-value.c:33 -1
     (nil))
(jump_insn 27 26 41 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) fetch-value.c:33 -1
     (int_list:REG_BR_PROB 2900 (nil))
 -> 31)
(code_label 41 27 28 6 5 "" [1 uses])
(note 28 41 7 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 7 28 29 6 (set (reg:SI 87 [ D.9204 ])
        (const_int 1 [0x1])) fetch-value.c:36 -1
     (nil))
(jump_insn 29 7 30 6 (set (pc)
        (label_ref:DI 58)) 654 {jump}
     (nil)
 -> 58)
(barrier 30 29 31)
(code_label 31 30 32 7 4 "" [1 uses])
(note 32 31 33 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 7 (set (reg:DI 103)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [4 descptr+0 S8 A64])) fetch-value.c:34 -1
     (nil))
(insn 34 33 35 7 (set (reg:DI 104)
        (mem/f:DI (plus:DI (reg/v/f:DI 98 [ ta ])
                (const_int 16 [0x10])) [4 ta_11(D)->ph+0 S8 A64])) fetch-value.c:34 -1
     (nil))
(insn 35 34 36 7 (set (reg:DI 2 cx)
        (const_int 4 [0x4])) fetch-value.c:34 -1
     (nil))
(insn 36 35 37 7 (set (reg:DI 1 dx)
        (reg/v/f:DI 99 [ sizep ])) fetch-value.c:34 -1
     (nil))
(insn 37 36 38 7 (set (reg:DI 4 si)
        (reg:DI 103)) fetch-value.c:34 -1
     (nil))
(insn 38 37 39 7 (set (reg:DI 5 di)
        (reg:DI 104)) fetch-value.c:34 -1
     (nil))
(call_insn 39 38 40 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ps_pdread") [flags 0x41]  <function_decl 0x2b107053e0d8 ps_pdread>) [0 ps_pdread S1 A8])
            (const_int 0 [0]))) fetch-value.c:34 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("ps_pdread") [flags 0x41]  <function_decl 0x2b107053e0d8 ps_pdread>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 40 39 42 7 (set (reg/v:SI 93 [ err ])
        (reg:SI 0 ax)) fetch-value.c:34 -1
     (nil))
(insn 42 40 43 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 93 [ err ])
            (const_int 0 [0]))) fetch-value.c:35 -1
     (nil))
(jump_insn 43 42 44 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 41)
            (pc))) fetch-value.c:35 -1
     (int_list:REG_BR_PROB 0 (nil))
 -> 41)
(note 44 43 45 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 8 (set (reg:SI 94 [ D.9205 ])
        (mem:SI (reg/v/f:DI 99 [ sizep ]) [1 *sizep_9(D)+0 S4 A32])) fetch-value.c:37 -1
     (nil))
(insn 46 45 47 8 (parallel [
            (set (reg:SI 105 [ D.9205 ])
                (and:SI (reg:SI 94 [ D.9205 ])
                    (const_int -16777216 [0xffffffffff000000])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:37 -1
     (nil))
(insn 47 46 48 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 105 [ D.9205 ])
            (const_int 0 [0]))) fetch-value.c:37 -1
     (nil))
(jump_insn 48 47 49 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) fetch-value.c:37 -1
     (int_list:REG_BR_PROB 3900 (nil))
 -> 52)
(note 49 48 50 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 9 (set (reg:SI 96 [ D.9205 ])
        (bswap:SI (reg:SI 94 [ D.9205 ]))) ../sysdeps/x86/bits/byteswap.h:47 -1
     (nil))
(insn 51 50 52 9 (set (mem:SI (reg/v/f:DI 99 [ sizep ]) [1 *sizep_9(D)+0 S4 A32])
        (reg:SI 96 [ D.9205 ])) fetch-value.c:38 -1
     (nil))
(code_label 52 51 53 10 6 "" [1 uses])
(note 53 52 8 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 8 53 54 10 (set (reg:SI 87 [ D.9204 ])
        (const_int 0 [0])) fetch-value.c:40 -1
     (nil))
(jump_insn 54 8 55 10 (set (pc)
        (label_ref 58)) -1
     (nil)
 -> 58)
(barrier 55 54 72)
(code_label 72 55 71 11 8 "" [1 uses])
(note 71 72 6 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 6 71 67 11 (set (reg:SI 87 [ D.9204 ])
        (const_int 14 [0xe])) fetch-value.c:32 -1
     (nil))
(jump_insn 67 6 68 11 (set (pc)
        (label_ref 58)) -1
     (nil)
 -> 58)
(barrier 68 67 70)
(code_label 70 68 69 13 7 "" [1 uses])
(note 69 70 9 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 9 69 58 13 (set (reg:SI 87 [ D.9204 ])
        (const_int 0 [0])) fetch-value.c:40 -1
     (nil))
(code_label 58 9 59 14 2 "" [3 uses])
(note 59 58 60 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 64 14 (set (reg:SI 97 [ <retval> ])
        (reg:SI 87 [ D.9204 ])) -1
     (nil))
(insn 64 60 65 14 (set (reg/i:SI 0 ax)
        (reg:SI 97 [ <retval> ])) fetch-value.c:41 -1
     (nil))
(insn 65 64 0 14 (use (reg/i:SI 0 ax)) fetch-value.c:41 -1
     (nil))

;; Function _td_locate_field (_td_locate_field, funcdef_no=47, decl_uid=8734, cgraph_uid=47, symbol_order=49)

Partition 0: size 8 align 8
	descptr

;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7

;; Generating RTL for gimple basic block 8

;; Generating RTL for gimple basic block 9

;; Generating RTL for gimple basic block 10

;; Generating RTL for gimple basic block 11

;; Generating RTL for gimple basic block 12

;; Generating RTL for gimple basic block 13

;; Generating RTL for gimple basic block 14

;; Generating RTL for gimple basic block 15

;; Generating RTL for gimple basic block 16

;; Generating RTL for gimple basic block 17

;; Generating RTL for gimple basic block 18
Edge 3->11 redirected to 23
Edge 7->11 redirected to 24
Edge 15->18 redirected to 25


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Redirecting jump 32 from 14 to 24.
Edge 9->11 redirected to 15
Merging block 11 into block 10...
Merged blocks 10 and 11.
Merged 10 and 11 without moving.
Redirecting jump 119 from 14 to 24.
Merging block 14 into block 13...
Merged blocks 13 and 14.
Merged 13 and 14 without moving.
Forwarding edge 16->17 to 22 failed.
Forwarding edge 19->20 to 16 failed.
Removing jump 111.
Merging block 25 into block 24...
Merged blocks 24 and 25.
Merged 24 and 25 without moving.


try_optimize_cfg iteration 2

Forwarding edge 16->17 to 22 failed.
Forwarding edge 19->20 to 16 failed.


;;
;; Full RTL generated for this function:
;;
(note 1 0 13 NOTE_INSN_DELETED)
(note 13 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 13 3 2 (set (reg/v/f:DI 117 [ ta ])
        (reg:DI 5 di [ ta ])) fetch-value.c:47 -1
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 118 [ desc ])
        (reg:DI 4 si [ desc ])) fetch-value.c:47 -1
     (nil))
(insn 4 3 5 2 (set (reg/v:SI 119 [ descriptor_name ])
        (reg:SI 1 dx [ descriptor_name ])) fetch-value.c:47 -1
     (nil))
(insn 5 4 6 2 (set (reg/v/f:DI 120 [ idx ])
        (reg:DI 2 cx [ idx ])) fetch-value.c:47 -1
     (nil))
(insn 6 5 7 2 (set (reg/v/f:DI 121 [ address ])
        (reg:DI 37 r8 [ address ])) fetch-value.c:47 -1
     (nil))
(note 7 6 15 2 NOTE_INSN_FUNCTION_BEG)
(insn 15 7 16 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/v/f:DI 118 [ desc ]) [1 *desc_11(D)+0 S4 A32])
            (const_int 0 [0]))) fetch-value.c:50 -1
     (nil))
(jump_insn 16 15 17 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 70)
            (pc))) fetch-value.c:50 -1
     (int_list:REG_BR_PROB 7100 (nil))
 -> 70)
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (parallel [
            (set (reg:DI 122)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:54 -1
     (nil))
(insn 19 18 20 4 (set (reg:DI 123)
        (mem/f:DI (plus:DI (reg/v/f:DI 117 [ ta ])
                (const_int 16 [0x10])) [4 ta_13(D)->ph+0 S8 A64])) fetch-value.c:54 -1
     (nil))
(insn 20 19 21 4 (set (reg:DI 2 cx)
        (reg:DI 122)) fetch-value.c:54 -1
     (nil))
(insn 21 20 22 4 (set (reg:SI 1 dx)
        (reg/v:SI 119 [ descriptor_name ])) fetch-value.c:54 -1
     (nil))
(insn 22 21 23 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x2b10707f2090 *.LC0>)) fetch-value.c:54 -1
     (nil))
(insn 23 22 24 4 (set (reg:DI 5 di)
        (reg:DI 123)) fetch-value.c:54 -1
     (nil))
(call_insn 24 23 25 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("td_mod_lookup") [flags 0x43]  <function_decl 0x2b107077d000 td_mod_lookup>) [0 td_mod_lookup S1 A8])
            (const_int 0 [0]))) fetch-value.c:54 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("td_mod_lookup") [flags 0x43]  <function_decl 0x2b107077d000 td_mod_lookup>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 25 24 26 4 (set (reg/v:SI 91 [ err ])
        (reg:SI 0 ax)) fetch-value.c:54 -1
     (nil))
(insn 26 25 27 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 91 [ err ])
            (const_int 5 [0x5]))) fetch-value.c:55 -1
     (nil))
(jump_insn 27 26 28 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 118)
            (pc))) fetch-value.c:55 612 {*jcc_1}
     (int_list:REG_BR_PROB 1991 (nil))
 -> 118)
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 91 [ err ])
            (const_int 0 [0]))) fetch-value.c:57 -1
     (nil))
(jump_insn 30 29 44 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) fetch-value.c:57 -1
     (int_list:REG_BR_PROB 2900 (nil))
 -> 34)
(code_label 44 30 31 6 23 "" [1 uses])
(note 31 44 9 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 9 31 32 6 (set (reg:SI 88 [ D.9211 ])
        (const_int 1 [0x1])) fetch-value.c:60 -1
     (nil))
(jump_insn 32 9 33 6 (set (pc)
        (label_ref:DI 108)) 654 {jump}
     (nil)
 -> 108)
(barrier 33 32 34)
(code_label 34 33 35 7 22 "" [1 uses])
(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 7 (set (reg:DI 124)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [4 descptr+0 S8 A64])) fetch-value.c:58 -1
     (nil))
(insn 37 36 38 7 (set (reg:DI 125)
        (mem/f:DI (plus:DI (reg/v/f:DI 117 [ ta ])
                (const_int 16 [0x10])) [4 ta_13(D)->ph+0 S8 A64])) fetch-value.c:58 -1
     (nil))
(insn 38 37 39 7 (set (reg:DI 2 cx)
        (const_int 12 [0xc])) fetch-value.c:58 -1
     (nil))
(insn 39 38 40 7 (set (reg:DI 1 dx)
        (reg/v/f:DI 118 [ desc ])) fetch-value.c:58 -1
     (nil))
(insn 40 39 41 7 (set (reg:DI 4 si)
        (reg:DI 124)) fetch-value.c:58 -1
     (nil))
(insn 41 40 42 7 (set (reg:DI 5 di)
        (reg:DI 125)) fetch-value.c:58 -1
     (nil))
(call_insn 42 41 43 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ps_pdread") [flags 0x41]  <function_decl 0x2b107053e0d8 ps_pdread>) [0 ps_pdread S1 A8])
            (const_int 0 [0]))) fetch-value.c:58 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("ps_pdread") [flags 0x41]  <function_decl 0x2b107053e0d8 ps_pdread>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 43 42 45 7 (set (reg/v:SI 94 [ err ])
        (reg:SI 0 ax)) fetch-value.c:58 -1
     (nil))
(insn 45 43 46 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 94 [ err ])
            (const_int 0 [0]))) fetch-value.c:59 -1
     (nil))
(jump_insn 46 45 47 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) fetch-value.c:59 -1
     (int_list:REG_BR_PROB 0 (nil))
 -> 44)
(note 47 46 48 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 8 (set (reg:SI 95 [ D.9212 ])
        (mem:SI (reg/v/f:DI 118 [ desc ]) [1 *desc_11(D)+0 S4 A32])) fetch-value.c:61 -1
     (nil))
(insn 49 48 50 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 95 [ D.9212 ])
            (const_int 0 [0]))) fetch-value.c:61 -1
     (nil))
(jump_insn 50 49 51 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 122)
            (pc))) fetch-value.c:61 612 {*jcc_1}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 122)
(note 51 50 52 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 9 (parallel [
            (set (reg:SI 126 [ D.9212 ])
                (and:SI (reg:SI 95 [ D.9212 ])
                    (const_int -16777216 [0xffffffffff000000])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:63 -1
     (nil))
(insn 53 52 54 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 126 [ D.9212 ])
            (const_int 0 [0]))) fetch-value.c:63 -1
     (nil))
(jump_insn 54 53 55 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 70)
            (pc))) fetch-value.c:63 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 70)
(note 55 54 56 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 10 (set (reg:SI 127)
        (mem:SI (plus:DI (reg/v/f:DI 118 [ desc ])
                (const_int 8 [0x8])) [1 MEM[(uint32_t *)desc_11(D) + 8B]+0 S4 A32])) ../sysdeps/x86/bits/byteswap.h:47 -1
     (nil))
(insn 57 56 58 10 (set (reg:SI 99 [ D.9212 ])
        (bswap:SI (reg:SI 127))) ../sysdeps/x86/bits/byteswap.h:47 -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 118 [ desc ])
                    (const_int 8 [0x8])) [1 MEM[(uint32_t *)desc_11(D) + 8B]+0 S4 A32]))
        (nil)))
(insn 58 57 59 10 (set (mem:SI (plus:DI (reg/v/f:DI 118 [ desc ])
                (const_int 8 [0x8])) [1 MEM[(uint32_t *)desc_11(D) + 8B]+0 S4 A32])
        (reg:SI 99 [ D.9212 ])) fetch-value.c:67 -1
     (nil))
(insn 59 58 60 10 (set (reg:SI 128)
        (mem:SI (plus:DI (reg/v/f:DI 118 [ desc ])
                (const_int 4 [0x4])) [1 MEM[(uint32_t *)desc_11(D) + 4B]+0 S4 A32])) ../sysdeps/x86/bits/byteswap.h:47 -1
     (nil))
(insn 60 59 61 10 (set (reg:SI 104 [ D.9212 ])
        (bswap:SI (reg:SI 128))) ../sysdeps/x86/bits/byteswap.h:47 -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (plus:DI (reg/v/f:DI 118 [ desc ])
                    (const_int 4 [0x4])) [1 MEM[(uint32_t *)desc_11(D) + 4B]+0 S4 A32]))
        (nil)))
(insn 61 60 64 10 (set (mem:SI (plus:DI (reg/v/f:DI 118 [ desc ])
                (const_int 4 [0x4])) [1 MEM[(uint32_t *)desc_11(D) + 4B]+0 S4 A32])
        (reg:SI 104 [ D.9212 ])) fetch-value.c:68 -1
     (nil))
(jump_insn 64 61 65 10 (set (pc)
        (label_ref 70)) -1
     (nil)
 -> 70)
(barrier 65 64 118)
(code_label 118 65 117 12 30 "" [1 uses])
(note 117 118 8 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 8 117 119 12 (set (reg:SI 88 [ D.9211 ])
        (const_int 14 [0xe])) fetch-value.c:56 -1
     (nil))
(jump_insn 119 8 120 12 (set (pc)
        (label_ref:DI 108)) 654 {jump}
     (nil)
 -> 108)
(barrier 120 119 122)
(code_label 122 120 121 13 31 "" [1 uses])
(note 121 122 10 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 10 121 68 13 (set (reg:SI 88 [ D.9211 ])
        (const_int 15 [0xf])) fetch-value.c:62 -1
     (nil))
(jump_insn 68 10 69 13 (set (pc)
        (label_ref 108)) fetch-value.c:56 -1
     (nil)
 -> 108)
(barrier 69 68 70)
(code_label 70 69 71 15 20 "" [3 uses])
(note 71 70 72 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 120 [ idx ])
            (const_int 0 [0]))) fetch-value.c:72 -1
     (nil))
(jump_insn 73 72 86 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) fetch-value.c:72 -1
     (int_list:REG_BR_PROB 8500 (nil))
 -> 83)
(code_label 86 73 74 16 29 "" [2 uses])
(note 74 86 75 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 16 (set (reg:DI 115 [ D.9215 ])
        (reg/v/f:DI 120 [ idx ])) -1
     (nil))
(insn 76 75 77 16 (set (reg/v:SI 87 [ elemsize ])
        (mem:SI (reg/v/f:DI 118 [ desc ]) [1 *desc_11(D)+0 S4 A32])) fetch-value.c:78 -1
     (nil))
(insn 77 76 78 16 (parallel [
            (set (reg:SI 129 [ D.9212 ])
                (and:SI (reg/v:SI 87 [ elemsize ])
                    (const_int -16777216 [0xffffffffff000000])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:79 -1
     (nil))
(insn 78 77 79 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 129 [ D.9212 ])
            (const_int 0 [0]))) fetch-value.c:79 -1
     (nil))
(jump_insn 79 78 82 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) fetch-value.c:79 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 96)
(note 82 79 80 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(jump_insn 80 82 81 17 (set (pc)
        (label_ref 99)) -1
     (nil)
 -> 99)
(barrier 81 80 83)
(code_label 83 81 84 18 26 "" [1 uses])
(note 84 83 85 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 87 18 (set (reg:SI 100 [ D.9212 ])
        (mem:SI (plus:DI (reg/v/f:DI 118 [ desc ])
                (const_int 4 [0x4])) [1 MEM[(uint32_t *)desc_11(D) + 4B]+0 S4 A32])) fetch-value.c:72 -1
     (nil))
(insn 87 85 88 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 100 [ D.9212 ])
            (const_int 0 [0]))) fetch-value.c:72 -1
     (nil))
(jump_insn 88 87 89 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) fetch-value.c:72 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 86)
(note 89 88 90 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 19 (set (reg:DI 130 [ D.9215 ])
        (zero_extend:DI (reg:SI 100 [ D.9212 ]))) fetch-value.c:73 -1
     (nil))
(insn 91 90 92 19 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v/f:DI 120 [ idx ])
            (reg:DI 130 [ D.9215 ]))) fetch-value.c:73 -1
     (nil))
(jump_insn 92 91 95 19 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 126)
            (pc))) fetch-value.c:73 612 {*jcc_1}
     (int_list:REG_BR_PROB 6700 (nil))
 -> 126)
(note 95 92 93 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(jump_insn 93 95 94 20 (set (pc)
        (label_ref 86)) -1
     (nil)
 -> 86)
(barrier 94 93 96)
(code_label 96 94 97 21 27 "" [1 uses])
(note 97 96 98 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 21 (set (reg/v:SI 87 [ elemsize ])
        (bswap:SI (reg/v:SI 87 [ elemsize ]))) ../sysdeps/x86/bits/byteswap.h:47 -1
     (nil))
(code_label 99 98 100 22 28 "" [1 uses])
(note 100 99 101 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 22 (parallel [
            (set (reg:SI 131 [ D.9212 ])
                (lshiftrt:SI (reg/v:SI 87 [ elemsize ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:83 -1
     (nil))
(insn 102 101 103 22 (set (reg:DI 132 [ D.9215 ])
        (zero_extend:DI (reg:SI 131 [ D.9212 ]))) fetch-value.c:83 -1
     (nil))
(insn 103 102 104 22 (parallel [
            (set (reg:DI 133 [ D.9215 ])
                (mult:DI (reg:DI 132 [ D.9215 ])
                    (reg:DI 115 [ D.9215 ])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:83 -1
     (nil))
(insn 104 103 105 22 (set (reg:SI 135)
        (mem:SI (plus:DI (reg/v/f:DI 118 [ desc ])
                (const_int 8 [0x8])) [1 MEM[(uint32_t *)desc_11(D) + 8B]+0 S4 A32])) fetch-value.c:83 -1
     (nil))
(insn 105 104 106 22 (set (reg:DI 134 [ D.9217 ])
        (sign_extend:DI (reg:SI 135))) fetch-value.c:83 -1
     (nil))
(insn 106 105 107 22 (parallel [
            (set (reg:DI 136 [ D.9217 ])
                (plus:DI (reg:DI 133 [ D.9215 ])
                    (reg:DI 134 [ D.9217 ])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:83 -1
     (nil))
(insn 107 106 12 22 (parallel [
            (set (mem/f:DI (reg/v/f:DI 121 [ address ]) [4 *address_39(D)+0 S8 A64])
                (plus:DI (mem/f:DI (reg/v/f:DI 121 [ address ]) [4 *address_39(D)+0 S8 A64])
                    (reg:DI 136 [ D.9217 ])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:83 -1
     (nil))
(insn 12 107 123 22 (set (reg:SI 88 [ D.9211 ])
        (const_int 0 [0])) fetch-value.c:84 -1
     (nil))
(jump_insn 123 12 124 22 (set (pc)
        (label_ref 108)) fetch-value.c:84 -1
     (nil)
 -> 108)
(barrier 124 123 126)
(code_label 126 124 125 23 32 "" [1 uses])
(note 125 126 11 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 11 125 108 23 (set (reg:SI 88 [ D.9211 ])
        (const_int 16 [0x10])) fetch-value.c:76 -1
     (nil))
(code_label 108 11 109 24 25 "" [4 uses])
(note 109 108 110 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 114 24 (set (reg:SI 116 [ <retval> ])
        (reg:SI 88 [ D.9211 ])) -1
     (nil))
(insn 114 110 115 24 (set (reg/i:SI 0 ax)
        (reg:SI 116 [ <retval> ])) fetch-value.c:85 -1
     (nil))
(insn 115 114 0 24 (use (reg/i:SI 0 ax)) fetch-value.c:85 -1
     (nil))

;; Function _td_fetch_value (_td_fetch_value, funcdef_no=48, decl_uid=8741, cgraph_uid=48, symbol_order=50)

Partition 4: size 8 align 8
	value	value	value	value	value

;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7

;; Generating RTL for gimple basic block 8

;; Generating RTL for gimple basic block 9

;; Generating RTL for gimple basic block 10

;; Generating RTL for gimple basic block 11

;; Generating RTL for gimple basic block 12

;; Generating RTL for gimple basic block 13

;; Generating RTL for gimple basic block 14
Edge 2->14 redirected to 17
Edge 11->14 redirected to 18
Purged non-fallthru edges from bb 20


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Edge 4->6 redirected to 7
Forwarding edge 5->6 to 7 failed.
Deleted label in block 6.
Removing jump 128.
Merging block 20 into block 19...
Merged blocks 19 and 20.
Merged 19 and 20 without moving.


try_optimize_cfg iteration 2

Forwarding edge 5->6 to 7 failed.


;;
;; Full RTL generated for this function:
;;
(note 1 0 11 NOTE_INSN_DELETED)
(note 11 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 11 3 2 (set (reg/v/f:DI 121 [ ta ])
        (reg:DI 5 di [ ta ])) fetch-value.c:92 -1
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 122 [ desc ])
        (reg:DI 4 si [ desc ])) fetch-value.c:92 -1
     (nil))
(insn 4 3 5 2 (set (reg/v:SI 123 [ descriptor_name ])
        (reg:SI 1 dx [ descriptor_name ])) fetch-value.c:92 -1
     (nil))
(insn 5 4 6 2 (set (reg/v/f:DI 124 [ idx ])
        (reg:DI 2 cx [ idx ])) fetch-value.c:92 -1
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [4 address+0 S8 A64])
        (reg:DI 37 r8 [ address ])) fetch-value.c:92 -1
     (nil))
(insn 7 6 8 2 (set (reg/v/f:DI 125 [ result ])
        (reg:DI 38 r9 [ result ])) fetch-value.c:92 -1
     (nil))
(note 8 7 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 8 14 2 (parallel [
            (set (reg:DI 126)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:94 -1
     (nil))
(insn 14 13 15 2 (set (reg:DI 37 r8)
        (reg:DI 126)) fetch-value.c:94 -1
     (nil))
(insn 15 14 16 2 (set (reg:DI 2 cx)
        (reg/v/f:DI 124 [ idx ])) fetch-value.c:94 -1
     (nil))
(insn 16 15 17 2 (set (reg:SI 1 dx)
        (reg/v:SI 123 [ descriptor_name ])) fetch-value.c:94 -1
     (nil))
(insn 17 16 18 2 (set (reg:DI 4 si)
        (reg/v/f:DI 122 [ desc ])) fetch-value.c:94 -1
     (nil))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (reg/v/f:DI 121 [ ta ])) fetch-value.c:94 -1
     (nil))
(call_insn 19 18 20 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_td_locate_field") [flags 0x3]  <function_decl 0x2b107077d0d8 _td_locate_field>) [0 _td_locate_field S1 A8])
            (const_int 0 [0]))) fetch-value.c:94 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_td_locate_field") [flags 0x3]  <function_decl 0x2b107077d0d8 _td_locate_field>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 20 19 21 2 (set (reg/v:SI 89 [ terr ])
        (reg:SI 0 ax)) fetch-value.c:94 -1
     (nil))
(insn 21 20 22 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 89 [ terr ])
            (const_int 0 [0]))) fetch-value.c:95 -1
     (nil))
(jump_insn 22 21 23 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 137)
            (pc))) fetch-value.c:95 612 {*jcc_1}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 137)
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg:SI 90 [ D.9222 ])
        (mem:SI (reg/v/f:DI 122 [ desc ]) [1 *desc_7(D)+0 S4 A32])) fetch-value.c:98 -1
     (nil))
(insn 25 24 26 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ D.9222 ])
            (const_int 134217728 [0x8000000]))) fetch-value.c:98 -1
     (nil))
(insn 26 25 27 4 (set (reg:QI 128 [ D.9227 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fetch-value.c:98 -1
     (nil))
(insn 27 26 28 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 128 [ D.9227 ])
            (const_int 0 [0]))) fetch-value.c:98 -1
     (nil))
(jump_insn 28 27 142 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 144)
            (pc))) fetch-value.c:98 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 144)
(note 142 28 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 142 30 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ D.9222 ])
            (const_int 8 [0x8]))) fetch-value.c:98 -1
     (nil))
(insn 30 29 31 5 (set (reg:QI 130 [ D.9227 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fetch-value.c:98 -1
     (nil))
(insn 31 30 32 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 130 [ D.9227 ])
            (const_int 0 [0]))) fetch-value.c:98 -1
     (nil))
(jump_insn 32 31 143 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) fetch-value.c:98 -1
     (int_list:REG_BR_PROB 8372 (nil))
 -> 48)
(note 143 32 144 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(code_label 144 143 34 7 53 "" [1 uses])
(note 34 144 35 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 7 (parallel [
            (set (reg:DI 131)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:101 -1
     (nil))
(insn 36 35 37 7 (set (reg:DI 132)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [4 address+0 S8 A64])) fetch-value.c:101 -1
     (nil))
(insn 37 36 38 7 (set (reg:DI 133)
        (mem/f:DI (plus:DI (reg/v/f:DI 121 [ ta ])
                (const_int 16 [0x10])) [4 ta_6(D)->ph+0 S8 A64])) fetch-value.c:101 -1
     (nil))
(insn 38 37 39 7 (set (reg:DI 2 cx)
        (const_int 1 [0x1])) fetch-value.c:101 -1
     (nil))
(insn 39 38 40 7 (set (reg:DI 1 dx)
        (reg:DI 131)) fetch-value.c:101 -1
     (nil))
(insn 40 39 41 7 (set (reg:DI 4 si)
        (reg:DI 132)) fetch-value.c:101 -1
     (nil))
(insn 41 40 42 7 (set (reg:DI 5 di)
        (reg:DI 133)) fetch-value.c:101 -1
     (nil))
(call_insn 42 41 43 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ps_pdread") [flags 0x41]  <function_decl 0x2b107053e0d8 ps_pdread>) [0 ps_pdread S1 A8])
            (const_int 0 [0]))) fetch-value.c:101 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("ps_pdread") [flags 0x41]  <function_decl 0x2b107053e0d8 ps_pdread>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 43 42 44 7 (set (reg/v:SI 87 [ err ])
        (reg:SI 0 ax)) fetch-value.c:101 -1
     (nil))
(insn 44 43 45 7 (set (reg:DI 134)
        (zero_extend:DI (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [0 value+0 S1 A64]))) fetch-value.c:102 -1
     (nil))
(insn 45 44 46 7 (set (mem/f:DI (reg/v/f:DI 125 [ result ]) [4 *result_21(D)+0 S8 A64])
        (reg:DI 134)) fetch-value.c:102 -1
     (nil))
(jump_insn 46 45 47 7 (set (pc)
        (label_ref 119)) fetch-value.c:99 -1
     (nil)
 -> 119)
(barrier 47 46 48)
(code_label 48 47 49 8 45 "" [1 uses])
(note 49 48 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ D.9222 ])
            (const_int 32 [0x20]))) fetch-value.c:104 -1
     (nil))
(jump_insn 51 50 52 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 65)
            (pc))) fetch-value.c:104 -1
     (int_list:REG_BR_PROB 8629 (nil))
 -> 65)
(note 52 51 53 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 9 (parallel [
            (set (reg:DI 135)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:107 -1
     (nil))
(insn 54 53 55 9 (set (reg:DI 136)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [4 address+0 S8 A64])) fetch-value.c:107 -1
     (nil))
(insn 55 54 56 9 (set (reg:DI 137)
        (mem/f:DI (plus:DI (reg/v/f:DI 121 [ ta ])
                (const_int 16 [0x10])) [4 ta_6(D)->ph+0 S8 A64])) fetch-value.c:107 -1
     (nil))
(insn 56 55 57 9 (set (reg:DI 2 cx)
        (const_int 4 [0x4])) fetch-value.c:107 -1
     (nil))
(insn 57 56 58 9 (set (reg:DI 1 dx)
        (reg:DI 135)) fetch-value.c:107 -1
     (nil))
(insn 58 57 59 9 (set (reg:DI 4 si)
        (reg:DI 136)) fetch-value.c:107 -1
     (nil))
(insn 59 58 60 9 (set (reg:DI 5 di)
        (reg:DI 137)) fetch-value.c:107 -1
     (nil))
(call_insn 60 59 61 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ps_pdread") [flags 0x41]  <function_decl 0x2b107053e0d8 ps_pdread>) [0 ps_pdread S1 A8])
            (const_int 0 [0]))) fetch-value.c:107 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("ps_pdread") [flags 0x41]  <function_decl 0x2b107053e0d8 ps_pdread>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 61 60 62 9 (set (reg/v:SI 87 [ err ])
        (reg:SI 0 ax)) fetch-value.c:107 -1
     (nil))
(insn 62 61 63 9 (set (mem/f:DI (reg/v/f:DI 125 [ result ]) [4 *result_21(D)+0 S8 A64])
        (zero_extend:DI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 value+0 S4 A64]))) fetch-value.c:108 -1
     (nil))
(jump_insn 63 62 64 9 (set (pc)
        (label_ref 119)) -1
     (nil)
 -> 119)
(barrier 64 63 65)
(code_label 65 64 66 10 48 "" [1 uses])
(note 66 65 67 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ D.9222 ])
            (const_int 64 [0x40]))) fetch-value.c:110 -1
     (nil))
(jump_insn 68 67 69 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) fetch-value.c:110 -1
     (int_list:REG_BR_PROB 8629 (nil))
 -> 83)
(note 69 68 70 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 11 (parallel [
            (set (reg:DI 138)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:115 -1
     (nil))
(insn 71 70 72 11 (set (reg:DI 139)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [4 address+0 S8 A64])) fetch-value.c:115 -1
     (nil))
(insn 72 71 73 11 (set (reg:DI 140)
        (mem/f:DI (plus:DI (reg/v/f:DI 121 [ ta ])
                (const_int 16 [0x10])) [4 ta_6(D)->ph+0 S8 A64])) fetch-value.c:115 -1
     (nil))
(insn 73 72 74 11 (set (reg:DI 2 cx)
        (const_int 8 [0x8])) fetch-value.c:115 -1
     (nil))
(insn 74 73 75 11 (set (reg:DI 1 dx)
        (reg:DI 138)) fetch-value.c:115 -1
     (nil))
(insn 75 74 76 11 (set (reg:DI 4 si)
        (reg:DI 139)) fetch-value.c:115 -1
     (nil))
(insn 76 75 77 11 (set (reg:DI 5 di)
        (reg:DI 140)) fetch-value.c:115 -1
     (nil))
(call_insn 77 76 78 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ps_pdread") [flags 0x41]  <function_decl 0x2b107053e0d8 ps_pdread>) [0 ps_pdread S1 A8])
            (const_int 0 [0]))) fetch-value.c:115 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("ps_pdread") [flags 0x41]  <function_decl 0x2b107053e0d8 ps_pdread>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 78 77 79 11 (set (reg/v:SI 87 [ err ])
        (reg:SI 0 ax)) fetch-value.c:115 -1
     (nil))
(insn 79 78 80 11 (set (reg:DI 141)
        (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [7 value+0 S8 A64])) fetch-value.c:116 -1
     (nil))
(insn 80 79 81 11 (set (mem/f:DI (reg/v/f:DI 125 [ result ]) [4 *result_21(D)+0 S8 A64])
        (reg:DI 141)) fetch-value.c:116 -1
     (nil))
(jump_insn 81 80 82 11 (set (pc)
        (label_ref 119)) -1
     (nil)
 -> 119)
(barrier 82 81 83)
(code_label 83 82 84 12 49 "" [1 uses])
(note 84 83 85 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ D.9222 ])
            (const_int 536870912 [0x20000000]))) fetch-value.c:118 -1
     (nil))
(jump_insn 86 85 87 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) fetch-value.c:118 -1
     (int_list:REG_BR_PROB 8629 (nil))
 -> 102)
(note 87 86 88 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 13 (parallel [
            (set (reg:DI 142)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:121 -1
     (nil))
(insn 89 88 90 13 (set (reg:DI 143)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [4 address+0 S8 A64])) fetch-value.c:121 -1
     (nil))
(insn 90 89 91 13 (set (reg:DI 144)
        (mem/f:DI (plus:DI (reg/v/f:DI 121 [ ta ])
                (const_int 16 [0x10])) [4 ta_6(D)->ph+0 S8 A64])) fetch-value.c:121 -1
     (nil))
(insn 91 90 92 13 (set (reg:DI 2 cx)
        (const_int 4 [0x4])) fetch-value.c:121 -1
     (nil))
(insn 92 91 93 13 (set (reg:DI 1 dx)
        (reg:DI 142)) fetch-value.c:121 -1
     (nil))
(insn 93 92 94 13 (set (reg:DI 4 si)
        (reg:DI 143)) fetch-value.c:121 -1
     (nil))
(insn 94 93 95 13 (set (reg:DI 5 di)
        (reg:DI 144)) fetch-value.c:121 -1
     (nil))
(call_insn 95 94 96 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ps_pdread") [flags 0x41]  <function_decl 0x2b107053e0d8 ps_pdread>) [0 ps_pdread S1 A8])
            (const_int 0 [0]))) fetch-value.c:121 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("ps_pdread") [flags 0x41]  <function_decl 0x2b107053e0d8 ps_pdread>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 96 95 97 13 (set (reg/v:SI 87 [ err ])
        (reg:SI 0 ax)) fetch-value.c:121 -1
     (nil))
(insn 97 96 98 13 (set (reg:SI 145)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 value+0 S4 A64])) ../sysdeps/x86/bits/byteswap.h:47 -1
     (nil))
(insn 98 97 99 13 (set (reg:SI 104 [ D.9222 ])
        (bswap:SI (reg:SI 145))) ../sysdeps/x86/bits/byteswap.h:47 -1
     (expr_list:REG_EQUAL (bswap:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 value+0 S4 A64]))
        (nil)))
(insn 99 98 100 13 (set (mem/f:DI (reg/v/f:DI 125 [ result ]) [4 *result_21(D)+0 S8 A64])
        (zero_extend:DI (reg:SI 104 [ D.9222 ]))) fetch-value.c:123 -1
     (nil))
(jump_insn 100 99 101 13 (set (pc)
        (label_ref 119)) -1
     (nil)
 -> 119)
(barrier 101 100 102)
(code_label 102 101 103 14 50 "" [1 uses])
(note 103 102 104 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ D.9222 ])
            (const_int 1073741824 [0x40000000]))) fetch-value.c:125 -1
     (nil))
(jump_insn 105 104 106 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 141)
            (pc))) fetch-value.c:125 612 {*jcc_1}
     (int_list:REG_BR_PROB 9274 (nil))
 -> 141)
(note 106 105 107 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 15 (parallel [
            (set (reg:DI 146)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:130 -1
     (nil))
(insn 108 107 109 15 (set (reg:DI 147)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [4 address+0 S8 A64])) fetch-value.c:130 -1
     (nil))
(insn 109 108 110 15 (set (reg:DI 148)
        (mem/f:DI (plus:DI (reg/v/f:DI 121 [ ta ])
                (const_int 16 [0x10])) [4 ta_6(D)->ph+0 S8 A64])) fetch-value.c:130 -1
     (nil))
(insn 110 109 111 15 (set (reg:DI 2 cx)
        (const_int 8 [0x8])) fetch-value.c:130 -1
     (nil))
(insn 111 110 112 15 (set (reg:DI 1 dx)
        (reg:DI 146)) fetch-value.c:130 -1
     (nil))
(insn 112 111 113 15 (set (reg:DI 4 si)
        (reg:DI 147)) fetch-value.c:130 -1
     (nil))
(insn 113 112 114 15 (set (reg:DI 5 di)
        (reg:DI 148)) fetch-value.c:130 -1
     (nil))
(call_insn 114 113 115 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ps_pdread") [flags 0x41]  <function_decl 0x2b107053e0d8 ps_pdread>) [0 ps_pdread S1 A8])
            (const_int 0 [0]))) fetch-value.c:130 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("ps_pdread") [flags 0x41]  <function_decl 0x2b107053e0d8 ps_pdread>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 115 114 116 15 (set (reg/v:SI 87 [ err ])
        (reg:SI 0 ax)) fetch-value.c:130 -1
     (nil))
(insn 116 115 117 15 (set (reg:DI 149)
        (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [7 value+0 S8 A64])) ../sysdeps/x86/bits/byteswap.h:111 -1
     (nil))
(insn 117 116 118 15 (set (reg:DI 91 [ D.9223 ])
        (bswap:DI (reg:DI 149))) ../sysdeps/x86/bits/byteswap.h:111 -1
     (expr_list:REG_EQUAL (bswap:DI (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [7 value+0 S8 A64]))
        (nil)))
(insn 118 117 119 15 (set (mem/f:DI (reg/v/f:DI 125 [ result ]) [4 *result_21(D)+0 S8 A64])
        (reg:DI 91 [ D.9223 ])) fetch-value.c:132 -1
     (nil))
(code_label 119 118 120 16 47 "" [4 uses])
(note 120 119 121 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 87 [ err ])
            (const_int 0 [0]))) fetch-value.c:137 -1
     (nil))
(insn 122 121 123 16 (set (reg:QI 151)
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fetch-value.c:137 -1
     (nil))
(insn 123 122 124 16 (set (reg:SI 150 [ D.9227 ])
        (zero_extend:SI (reg:QI 151))) fetch-value.c:137 -1
     (nil))
(insn 124 123 134 16 (set (reg:SI 88 [ D.9221 ])
        (reg:SI 150 [ D.9227 ])) fetch-value.c:137 -1
     (nil))
(jump_insn 134 124 135 16 (set (pc)
        (label_ref 125)) fetch-value.c:137 -1
     (nil)
 -> 125)
(barrier 135 134 137)
(code_label 137 135 136 17 51 "" [1 uses])
(note 136 137 9 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 9 136 138 17 (set (reg:SI 88 [ D.9221 ])
        (reg/v:SI 89 [ terr ])) -1
     (nil))
(jump_insn 138 9 139 17 (set (pc)
        (label_ref 125)) -1
     (nil)
 -> 125)
(barrier 139 138 141)
(code_label 141 139 140 18 52 "" [1 uses])
(note 140 141 10 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 10 140 125 18 (set (reg:SI 88 [ D.9221 ])
        (const_int 15 [0xf])) fetch-value.c:135 -1
     (nil))
(code_label 125 10 126 19 44 "" [2 uses])
(note 126 125 127 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 131 19 (set (reg:SI 120 [ <retval> ])
        (reg:SI 88 [ D.9221 ])) -1
     (nil))
(insn 131 127 132 19 (set (reg/i:SI 0 ax)
        (reg:SI 120 [ <retval> ])) fetch-value.c:138 -1
     (nil))
(insn 132 131 0 19 (use (reg/i:SI 0 ax)) fetch-value.c:138 -1
     (nil))

;; Function _td_store_value (_td_store_value, funcdef_no=49, decl_uid=8755, cgraph_uid=49, symbol_order=51)

Partition 4: size 8 align 8
	value	value	value	value	value

;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7

;; Generating RTL for gimple basic block 8

;; Generating RTL for gimple basic block 9

;; Generating RTL for gimple basic block 10

;; Generating RTL for gimple basic block 11

;; Generating RTL for gimple basic block 12

;; Generating RTL for gimple basic block 13

;; Generating RTL for gimple basic block 14
Edge 2->14 redirected to 17
Edge 11->14 redirected to 18
Purged non-fallthru edges from bb 20


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Edge 4->6 redirected to 7
Forwarding edge 5->6 to 7 failed.
Deleted label in block 6.
Removing jump 125.
Merging block 20 into block 19...
Merged blocks 19 and 20.
Merged 19 and 20 without moving.


try_optimize_cfg iteration 2

Forwarding edge 5->6 to 7 failed.


;;
;; Full RTL generated for this function:
;;
(note 1 0 11 NOTE_INSN_DELETED)
(note 11 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 11 3 2 (set (reg/v/f:DI 116 [ ta ])
        (reg:DI 5 di [ ta ])) fetch-value.c:145 -1
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 117 [ desc ])
        (reg:DI 4 si [ desc ])) fetch-value.c:145 -1
     (nil))
(insn 4 3 5 2 (set (reg/v:SI 118 [ descriptor_name ])
        (reg:SI 1 dx [ descriptor_name ])) fetch-value.c:145 -1
     (nil))
(insn 5 4 6 2 (set (reg/v/f:DI 119 [ idx ])
        (reg:DI 2 cx [ idx ])) fetch-value.c:145 -1
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [4 address+0 S8 A64])
        (reg:DI 37 r8 [ address ])) fetch-value.c:145 -1
     (nil))
(insn 7 6 8 2 (set (reg/v/f:DI 120 [ widened_value ])
        (reg:DI 38 r9 [ widened_value ])) fetch-value.c:145 -1
     (nil))
(note 8 7 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 8 14 2 (parallel [
            (set (reg:DI 121)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:147 -1
     (nil))
(insn 14 13 15 2 (set (reg:DI 37 r8)
        (reg:DI 121)) fetch-value.c:147 -1
     (nil))
(insn 15 14 16 2 (set (reg:DI 2 cx)
        (reg/v/f:DI 119 [ idx ])) fetch-value.c:147 -1
     (nil))
(insn 16 15 17 2 (set (reg:SI 1 dx)
        (reg/v:SI 118 [ descriptor_name ])) fetch-value.c:147 -1
     (nil))
(insn 17 16 18 2 (set (reg:DI 4 si)
        (reg/v/f:DI 117 [ desc ])) fetch-value.c:147 -1
     (nil))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (reg/v/f:DI 116 [ ta ])) fetch-value.c:147 -1
     (nil))
(call_insn 19 18 20 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_td_locate_field") [flags 0x3]  <function_decl 0x2b107077d0d8 _td_locate_field>) [0 _td_locate_field S1 A8])
            (const_int 0 [0]))) fetch-value.c:147 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_td_locate_field") [flags 0x3]  <function_decl 0x2b107077d0d8 _td_locate_field>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 20 19 21 2 (set (reg/v:SI 89 [ terr ])
        (reg:SI 0 ax)) fetch-value.c:147 -1
     (nil))
(insn 21 20 22 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 89 [ terr ])
            (const_int 0 [0]))) fetch-value.c:148 -1
     (nil))
(jump_insn 22 21 23 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 134)
            (pc))) fetch-value.c:148 612 {*jcc_1}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 134)
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg:SI 90 [ D.9232 ])
        (mem:SI (reg/v/f:DI 117 [ desc ]) [1 *desc_7(D)+0 S4 A32])) fetch-value.c:151 -1
     (nil))
(insn 25 24 26 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ D.9232 ])
            (const_int 134217728 [0x8000000]))) fetch-value.c:151 -1
     (nil))
(insn 26 25 27 4 (set (reg:QI 123 [ D.9238 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fetch-value.c:151 -1
     (nil))
(insn 27 26 28 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 123 [ D.9238 ])
            (const_int 0 [0]))) fetch-value.c:151 -1
     (nil))
(jump_insn 28 27 139 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 141)
            (pc))) fetch-value.c:151 612 {*jcc_1}
     (int_list:REG_BR_PROB 1400 (nil))
 -> 141)
(note 139 28 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 139 30 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ D.9232 ])
            (const_int 8 [0x8]))) fetch-value.c:151 -1
     (nil))
(insn 30 29 31 5 (set (reg:QI 125 [ D.9238 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fetch-value.c:151 -1
     (nil))
(insn 31 30 32 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 125 [ D.9238 ])
            (const_int 0 [0]))) fetch-value.c:151 -1
     (nil))
(jump_insn 32 31 140 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) fetch-value.c:151 -1
     (int_list:REG_BR_PROB 8372 (nil))
 -> 47)
(note 140 32 141 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(code_label 141 140 34 7 69 "" [1 uses])
(note 34 141 35 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 7 (set (mem/c:QI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 value+0 S1 A64])
        (subreg:QI (reg/v/f:DI 120 [ widened_value ]) 0)) fetch-value.c:153 -1
     (nil))
(insn 36 35 37 7 (parallel [
            (set (reg:DI 126)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:154 -1
     (nil))
(insn 37 36 38 7 (set (reg:DI 127)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [4 address+0 S8 A64])) fetch-value.c:154 -1
     (nil))
(insn 38 37 39 7 (set (reg:DI 128)
        (mem/f:DI (plus:DI (reg/v/f:DI 116 [ ta ])
                (const_int 16 [0x10])) [4 ta_6(D)->ph+0 S8 A64])) fetch-value.c:154 -1
     (nil))
(insn 39 38 40 7 (set (reg:DI 2 cx)
        (const_int 1 [0x1])) fetch-value.c:154 -1
     (nil))
(insn 40 39 41 7 (set (reg:DI 1 dx)
        (reg:DI 126)) fetch-value.c:154 -1
     (nil))
(insn 41 40 42 7 (set (reg:DI 4 si)
        (reg:DI 127)) fetch-value.c:154 -1
     (nil))
(insn 42 41 43 7 (set (reg:DI 5 di)
        (reg:DI 128)) fetch-value.c:154 -1
     (nil))
(call_insn 43 42 44 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ps_pdwrite") [flags 0x41]  <function_decl 0x2b107053e1b0 ps_pdwrite>) [0 ps_pdwrite S1 A8])
            (const_int 0 [0]))) fetch-value.c:154 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("ps_pdwrite") [flags 0x41]  <function_decl 0x2b107053e1b0 ps_pdwrite>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 44 43 45 7 (set (reg/v:SI 87 [ err ])
        (reg:SI 0 ax)) fetch-value.c:154 -1
     (nil))
(jump_insn 45 44 46 7 (set (pc)
        (label_ref 116)) fetch-value.c:152 -1
     (nil)
 -> 116)
(barrier 46 45 47)
(code_label 47 46 48 8 61 "" [1 uses])
(note 48 47 49 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ D.9232 ])
            (const_int 32 [0x20]))) fetch-value.c:156 -1
     (nil))
(jump_insn 50 49 51 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 64)
            (pc))) fetch-value.c:156 -1
     (int_list:REG_BR_PROB 8629 (nil))
 -> 64)
(note 51 50 52 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 9 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 value+0 S4 A64])
        (subreg:SI (reg/v/f:DI 120 [ widened_value ]) 0)) fetch-value.c:158 -1
     (nil))
(insn 53 52 54 9 (parallel [
            (set (reg:DI 129)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:159 -1
     (nil))
(insn 54 53 55 9 (set (reg:DI 130)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [4 address+0 S8 A64])) fetch-value.c:159 -1
     (nil))
(insn 55 54 56 9 (set (reg:DI 131)
        (mem/f:DI (plus:DI (reg/v/f:DI 116 [ ta ])
                (const_int 16 [0x10])) [4 ta_6(D)->ph+0 S8 A64])) fetch-value.c:159 -1
     (nil))
(insn 56 55 57 9 (set (reg:DI 2 cx)
        (const_int 4 [0x4])) fetch-value.c:159 -1
     (nil))
(insn 57 56 58 9 (set (reg:DI 1 dx)
        (reg:DI 129)) fetch-value.c:159 -1
     (nil))
(insn 58 57 59 9 (set (reg:DI 4 si)
        (reg:DI 130)) fetch-value.c:159 -1
     (nil))
(insn 59 58 60 9 (set (reg:DI 5 di)
        (reg:DI 131)) fetch-value.c:159 -1
     (nil))
(call_insn 60 59 61 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ps_pdwrite") [flags 0x41]  <function_decl 0x2b107053e1b0 ps_pdwrite>) [0 ps_pdwrite S1 A8])
            (const_int 0 [0]))) fetch-value.c:159 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("ps_pdwrite") [flags 0x41]  <function_decl 0x2b107053e1b0 ps_pdwrite>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 61 60 62 9 (set (reg/v:SI 87 [ err ])
        (reg:SI 0 ax)) fetch-value.c:159 -1
     (nil))
(jump_insn 62 61 63 9 (set (pc)
        (label_ref 116)) -1
     (nil)
 -> 116)
(barrier 63 62 64)
(code_label 64 63 65 10 64 "" [1 uses])
(note 65 64 66 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ D.9232 ])
            (const_int 64 [0x40]))) fetch-value.c:161 -1
     (nil))
(jump_insn 67 66 68 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 81)
            (pc))) fetch-value.c:161 -1
     (int_list:REG_BR_PROB 8629 (nil))
 -> 81)
(note 68 67 69 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 11 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [7 value+0 S8 A64])
        (reg/v/f:DI 120 [ widened_value ])) fetch-value.c:163 -1
     (nil))
(insn 70 69 71 11 (parallel [
            (set (reg:DI 132)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:166 -1
     (nil))
(insn 71 70 72 11 (set (reg:DI 133)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [4 address+0 S8 A64])) fetch-value.c:166 -1
     (nil))
(insn 72 71 73 11 (set (reg:DI 134)
        (mem/f:DI (plus:DI (reg/v/f:DI 116 [ ta ])
                (const_int 16 [0x10])) [4 ta_6(D)->ph+0 S8 A64])) fetch-value.c:166 -1
     (nil))
(insn 73 72 74 11 (set (reg:DI 2 cx)
        (const_int 8 [0x8])) fetch-value.c:166 -1
     (nil))
(insn 74 73 75 11 (set (reg:DI 1 dx)
        (reg:DI 132)) fetch-value.c:166 -1
     (nil))
(insn 75 74 76 11 (set (reg:DI 4 si)
        (reg:DI 133)) fetch-value.c:166 -1
     (nil))
(insn 76 75 77 11 (set (reg:DI 5 di)
        (reg:DI 134)) fetch-value.c:166 -1
     (nil))
(call_insn 77 76 78 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ps_pdwrite") [flags 0x41]  <function_decl 0x2b107053e1b0 ps_pdwrite>) [0 ps_pdwrite S1 A8])
            (const_int 0 [0]))) fetch-value.c:166 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("ps_pdwrite") [flags 0x41]  <function_decl 0x2b107053e1b0 ps_pdwrite>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 78 77 79 11 (set (reg/v:SI 87 [ err ])
        (reg:SI 0 ax)) fetch-value.c:166 -1
     (nil))
(jump_insn 79 78 80 11 (set (pc)
        (label_ref 116)) -1
     (nil)
 -> 116)
(barrier 80 79 81)
(code_label 81 80 82 12 65 "" [1 uses])
(note 82 81 83 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ D.9232 ])
            (const_int 536870912 [0x20000000]))) fetch-value.c:168 -1
     (nil))
(jump_insn 84 83 85 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 100)
            (pc))) fetch-value.c:168 -1
     (int_list:REG_BR_PROB 8629 (nil))
 -> 100)
(note 85 84 86 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 13 (set (reg:SI 135)
        (subreg:SI (reg/v/f:DI 120 [ widened_value ]) 0)) ../sysdeps/x86/bits/byteswap.h:47 -1
     (nil))
(insn 87 86 88 13 (set (reg:SI 101 [ D.9232 ])
        (bswap:SI (reg:SI 135))) ../sysdeps/x86/bits/byteswap.h:47 -1
     (expr_list:REG_EQUAL (bswap:SI (subreg:SI (reg/v/f:DI 120 [ widened_value ]) 0))
        (nil)))
(insn 88 87 89 13 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 value+0 S4 A64])
        (reg:SI 101 [ D.9232 ])) fetch-value.c:171 -1
     (nil))
(insn 89 88 90 13 (parallel [
            (set (reg:DI 136)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:172 -1
     (nil))
(insn 90 89 91 13 (set (reg:DI 137)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [4 address+0 S8 A64])) fetch-value.c:172 -1
     (nil))
(insn 91 90 92 13 (set (reg:DI 138)
        (mem/f:DI (plus:DI (reg/v/f:DI 116 [ ta ])
                (const_int 16 [0x10])) [4 ta_6(D)->ph+0 S8 A64])) fetch-value.c:172 -1
     (nil))
(insn 92 91 93 13 (set (reg:DI 2 cx)
        (const_int 4 [0x4])) fetch-value.c:172 -1
     (nil))
(insn 93 92 94 13 (set (reg:DI 1 dx)
        (reg:DI 136)) fetch-value.c:172 -1
     (nil))
(insn 94 93 95 13 (set (reg:DI 4 si)
        (reg:DI 137)) fetch-value.c:172 -1
     (nil))
(insn 95 94 96 13 (set (reg:DI 5 di)
        (reg:DI 138)) fetch-value.c:172 -1
     (nil))
(call_insn 96 95 97 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ps_pdwrite") [flags 0x41]  <function_decl 0x2b107053e1b0 ps_pdwrite>) [0 ps_pdwrite S1 A8])
            (const_int 0 [0]))) fetch-value.c:172 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("ps_pdwrite") [flags 0x41]  <function_decl 0x2b107053e1b0 ps_pdwrite>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 97 96 98 13 (set (reg/v:SI 87 [ err ])
        (reg:SI 0 ax)) fetch-value.c:172 -1
     (nil))
(jump_insn 98 97 99 13 (set (pc)
        (label_ref 116)) -1
     (nil)
 -> 116)
(barrier 99 98 100)
(code_label 100 99 101 14 66 "" [1 uses])
(note 101 100 102 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ D.9232 ])
            (const_int 1073741824 [0x40000000]))) fetch-value.c:174 -1
     (nil))
(jump_insn 103 102 104 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 138)
            (pc))) fetch-value.c:174 612 {*jcc_1}
     (int_list:REG_BR_PROB 9274 (nil))
 -> 138)
(note 104 103 105 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 15 (set (reg:DI 91 [ D.9233 ])
        (bswap:DI (reg/v/f:DI 120 [ widened_value ]))) ../sysdeps/x86/bits/byteswap.h:111 -1
     (nil))
(insn 106 105 107 15 (set (mem/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [7 value+0 S8 A64])
        (reg:DI 91 [ D.9233 ])) fetch-value.c:179 -1
     (nil))
(insn 107 106 108 15 (parallel [
            (set (reg:DI 139)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:180 -1
     (nil))
(insn 108 107 109 15 (set (reg:DI 140)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [4 address+0 S8 A64])) fetch-value.c:180 -1
     (nil))
(insn 109 108 110 15 (set (reg:DI 141)
        (mem/f:DI (plus:DI (reg/v/f:DI 116 [ ta ])
                (const_int 16 [0x10])) [4 ta_6(D)->ph+0 S8 A64])) fetch-value.c:180 -1
     (nil))
(insn 110 109 111 15 (set (reg:DI 2 cx)
        (const_int 8 [0x8])) fetch-value.c:180 -1
     (nil))
(insn 111 110 112 15 (set (reg:DI 1 dx)
        (reg:DI 139)) fetch-value.c:180 -1
     (nil))
(insn 112 111 113 15 (set (reg:DI 4 si)
        (reg:DI 140)) fetch-value.c:180 -1
     (nil))
(insn 113 112 114 15 (set (reg:DI 5 di)
        (reg:DI 141)) fetch-value.c:180 -1
     (nil))
(call_insn 114 113 115 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ps_pdwrite") [flags 0x41]  <function_decl 0x2b107053e1b0 ps_pdwrite>) [0 ps_pdwrite S1 A8])
            (const_int 0 [0]))) fetch-value.c:180 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("ps_pdwrite") [flags 0x41]  <function_decl 0x2b107053e1b0 ps_pdwrite>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 115 114 116 15 (set (reg/v:SI 87 [ err ])
        (reg:SI 0 ax)) fetch-value.c:180 -1
     (nil))
(code_label 116 115 117 16 63 "" [4 uses])
(note 117 116 118 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 118 117 119 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 87 [ err ])
            (const_int 0 [0]))) fetch-value.c:185 -1
     (nil))
(insn 119 118 120 16 (set (reg:QI 143)
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fetch-value.c:185 -1
     (nil))
(insn 120 119 121 16 (set (reg:SI 142 [ D.9238 ])
        (zero_extend:SI (reg:QI 143))) fetch-value.c:185 -1
     (nil))
(insn 121 120 131 16 (set (reg:SI 88 [ D.9231 ])
        (reg:SI 142 [ D.9238 ])) fetch-value.c:185 -1
     (nil))
(jump_insn 131 121 132 16 (set (pc)
        (label_ref 122)) fetch-value.c:185 -1
     (nil)
 -> 122)
(barrier 132 131 134)
(code_label 134 132 133 17 67 "" [1 uses])
(note 133 134 9 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 9 133 135 17 (set (reg:SI 88 [ D.9231 ])
        (reg/v:SI 89 [ terr ])) -1
     (nil))
(jump_insn 135 9 136 17 (set (pc)
        (label_ref 122)) -1
     (nil)
 -> 122)
(barrier 136 135 138)
(code_label 138 136 137 18 68 "" [1 uses])
(note 137 138 10 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 10 137 122 18 (set (reg:SI 88 [ D.9231 ])
        (const_int 15 [0xf])) fetch-value.c:183 -1
     (nil))
(code_label 122 10 123 19 60 "" [2 uses])
(note 123 122 124 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 128 19 (set (reg:SI 115 [ <retval> ])
        (reg:SI 88 [ D.9231 ])) -1
     (nil))
(insn 128 124 129 19 (set (reg/i:SI 0 ax)
        (reg:SI 115 [ <retval> ])) fetch-value.c:186 -1
     (nil))
(insn 129 128 0 19 (use (reg/i:SI 0 ax)) fetch-value.c:186 -1
     (nil))

;; Function _td_fetch_value_local (_td_fetch_value_local, funcdef_no=50, decl_uid=8748, cgraph_uid=50, symbol_order=52)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7

;; Generating RTL for gimple basic block 8

;; Generating RTL for gimple basic block 9

;; Generating RTL for gimple basic block 10

;; Generating RTL for gimple basic block 11

;; Generating RTL for gimple basic block 12

;; Generating RTL for gimple basic block 13
Edge 2->13 redirected to 16
Edge 11->13 redirected to 17
Purged non-fallthru edges from bb 19


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Edge 4->6 redirected to 7
Forwarding edge 5->6 to 7 failed.
Deleted label in block 6.
Removing jump 87.
Merging block 19 into block 18...
Merged blocks 18 and 19.
Merged 18 and 19 without moving.


try_optimize_cfg iteration 2

Forwarding edge 5->6 to 7 failed.


;;
;; Full RTL generated for this function:
;;
(note 1 0 16 NOTE_INSN_DELETED)
(note 16 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 16 3 2 (set (reg/v/f:DI 114 [ ta ])
        (reg:DI 5 di [ ta ])) fetch-value.c:193 -1
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 115 [ desc ])
        (reg:DI 4 si [ desc ])) fetch-value.c:193 -1
     (nil))
(insn 4 3 5 2 (set (reg/v:SI 116 [ descriptor_name ])
        (reg:SI 1 dx [ descriptor_name ])) fetch-value.c:193 -1
     (nil))
(insn 5 4 6 2 (set (reg/v/f:DI 117 [ idx ])
        (reg:DI 2 cx [ idx ])) fetch-value.c:193 -1
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [4 address+0 S8 A64])
        (reg:DI 37 r8 [ address ])) fetch-value.c:193 -1
     (nil))
(insn 7 6 8 2 (set (reg/v/f:DI 118 [ result ])
        (reg:DI 38 r9 [ result ])) fetch-value.c:193 -1
     (nil))
(note 8 7 18 2 NOTE_INSN_FUNCTION_BEG)
(insn 18 8 19 2 (parallel [
            (set (reg:DI 119)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:194 -1
     (nil))
(insn 19 18 20 2 (set (reg:DI 37 r8)
        (reg:DI 119)) fetch-value.c:194 -1
     (nil))
(insn 20 19 21 2 (set (reg:DI 2 cx)
        (reg/v/f:DI 117 [ idx ])) fetch-value.c:194 -1
     (nil))
(insn 21 20 22 2 (set (reg:SI 1 dx)
        (reg/v:SI 116 [ descriptor_name ])) fetch-value.c:194 -1
     (nil))
(insn 22 21 23 2 (set (reg:DI 4 si)
        (reg/v/f:DI 115 [ desc ])) fetch-value.c:194 -1
     (nil))
(insn 23 22 24 2 (set (reg:DI 5 di)
        (reg/v/f:DI 114 [ ta ])) fetch-value.c:194 -1
     (nil))
(call_insn 24 23 25 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_td_locate_field") [flags 0x3]  <function_decl 0x2b107077d0d8 _td_locate_field>) [0 _td_locate_field S1 A8])
            (const_int 0 [0]))) fetch-value.c:194 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_td_locate_field") [flags 0x3]  <function_decl 0x2b107077d0d8 _td_locate_field>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 25 24 26 2 (set (reg/v:SI 88 [ terr ])
        (reg:SI 0 ax)) fetch-value.c:194 -1
     (nil))
(insn 26 25 27 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 88 [ terr ])
            (const_int 0 [0]))) fetch-value.c:195 -1
     (nil))
(jump_insn 27 26 28 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 96)
            (pc))) fetch-value.c:195 612 {*jcc_1}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 96)
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 4 (set (reg:SI 89 [ D.9243 ])
        (mem:SI (reg/v/f:DI 115 [ desc ]) [1 *desc_5(D)+0 S4 A32])) fetch-value.c:198 -1
     (nil))
(insn 30 29 31 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.9243 ])
            (const_int 134217728 [0x8000000]))) fetch-value.c:198 -1
     (nil))
(insn 31 30 32 4 (set (reg:QI 121 [ D.9246 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fetch-value.c:198 -1
     (nil))
(insn 32 31 33 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 121 [ D.9246 ])
            (const_int 0 [0]))) fetch-value.c:198 -1
     (nil))
(jump_insn 33 32 101 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 103)
            (pc))) fetch-value.c:198 612 {*jcc_1}
     (int_list:REG_BR_PROB 995 (nil))
 -> 103)
(note 101 33 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 34 101 35 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.9243 ])
            (const_int 8 [0x8]))) fetch-value.c:198 -1
     (nil))
(insn 35 34 36 5 (set (reg:QI 123 [ D.9246 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fetch-value.c:198 -1
     (nil))
(insn 36 35 37 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 123 [ D.9246 ])
            (const_int 0 [0]))) fetch-value.c:198 -1
     (nil))
(jump_insn 37 36 102 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) fetch-value.c:198 -1
     (int_list:REG_BR_PROB 8895 (nil))
 -> 45)
(note 102 37 103 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(code_label 103 102 39 7 84 "" [1 uses])
(note 39 103 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (reg/f:DI 124)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [4 address+0 S8 A64])) fetch-value.c:201 -1
     (nil))
(insn 41 40 42 7 (set (reg:DI 125)
        (zero_extend:DI (mem:QI (reg/f:DI 124) [0 MEM[(char * {ref-all})_36]+0 S1 A8]))) fetch-value.c:202 -1
     (nil))
(insn 42 41 12 7 (set (mem/f:DI (reg/v/f:DI 118 [ result ]) [4 *result_17(D)+0 S8 A64])
        (reg:DI 125)) fetch-value.c:202 -1
     (nil))
(insn 12 42 43 7 (set (reg:SI 87 [ D.9242 ])
        (const_int 0 [0])) fetch-value.c:237 -1
     (nil))
(jump_insn 43 12 44 7 (set (pc)
        (label_ref 84)) fetch-value.c:199 -1
     (nil)
 -> 84)
(barrier 44 43 45)
(code_label 45 44 46 8 77 "" [1 uses])
(note 46 45 47 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.9243 ])
            (const_int 32 [0x20]))) fetch-value.c:204 -1
     (nil))
(jump_insn 48 47 49 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) fetch-value.c:204 -1
     (int_list:REG_BR_PROB 8009 (nil))
 -> 54)
(note 49 48 50 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 9 (set (reg/f:DI 126)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [4 address+0 S8 A64])) fetch-value.c:207 -1
     (nil))
(insn 51 50 10 9 (set (mem/f:DI (reg/v/f:DI 118 [ result ]) [4 *result_17(D)+0 S8 A64])
        (zero_extend:DI (mem:SI (reg/f:DI 126) [0 MEM[(char * {ref-all})_12]+0 S4 A8]))) fetch-value.c:208 -1
     (nil))
(insn 10 51 52 9 (set (reg:SI 87 [ D.9242 ])
        (const_int 0 [0])) fetch-value.c:237 -1
     (nil))
(jump_insn 52 10 53 9 (set (pc)
        (label_ref 84)) -1
     (nil)
 -> 84)
(barrier 53 52 54)
(code_label 54 53 55 10 79 "" [1 uses])
(note 55 54 56 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.9243 ])
            (const_int 64 [0x40]))) fetch-value.c:210 -1
     (nil))
(jump_insn 57 56 58 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 64)
            (pc))) fetch-value.c:210 -1
     (int_list:REG_BR_PROB 8009 (nil))
 -> 64)
(note 58 57 59 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 11 (set (reg/f:DI 127)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [4 address+0 S8 A64])) fetch-value.c:215 -1
     (nil))
(insn 60 59 61 11 (set (reg:DI 128)
        (mem:DI (reg/f:DI 127) [0 MEM[(char * {ref-all})_19]+0 S8 A8])) fetch-value.c:216 -1
     (nil))
(insn 61 60 15 11 (set (mem/f:DI (reg/v/f:DI 118 [ result ]) [4 *result_17(D)+0 S8 A64])
        (reg:DI 128)) fetch-value.c:216 -1
     (nil))
(insn 15 61 62 11 (set (reg:SI 87 [ D.9242 ])
        (const_int 0 [0])) fetch-value.c:237 -1
     (nil))
(jump_insn 62 15 63 11 (set (pc)
        (label_ref 84)) -1
     (nil)
 -> 84)
(barrier 63 62 64)
(code_label 64 63 65 12 80 "" [1 uses])
(note 65 64 66 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.9243 ])
            (const_int 536870912 [0x20000000]))) fetch-value.c:218 -1
     (nil))
(jump_insn 67 66 68 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) fetch-value.c:218 -1
     (int_list:REG_BR_PROB 8009 (nil))
 -> 75)
(note 68 67 69 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 13 (set (reg/f:DI 129)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [4 address+0 S8 A64])) fetch-value.c:221 -1
     (nil))
(insn 70 69 71 13 (set (reg:SI 130)
        (mem:SI (reg/f:DI 129) [0 MEM[(char * {ref-all})_24]+0 S4 A8])) ../sysdeps/x86/bits/byteswap.h:47 -1
     (nil))
(insn 71 70 72 13 (set (reg:SI 100 [ D.9243 ])
        (bswap:SI (reg:SI 130))) ../sysdeps/x86/bits/byteswap.h:47 -1
     (expr_list:REG_EQUAL (bswap:SI (mem:SI (reg/f:DI 129) [0 MEM[(char * {ref-all})_24]+0 S4 A8]))
        (nil)))
(insn 72 71 14 13 (set (mem/f:DI (reg/v/f:DI 118 [ result ]) [4 *result_17(D)+0 S8 A64])
        (zero_extend:DI (reg:SI 100 [ D.9243 ]))) fetch-value.c:223 -1
     (nil))
(insn 14 72 73 13 (set (reg:SI 87 [ D.9242 ])
        (const_int 0 [0])) fetch-value.c:237 -1
     (nil))
(jump_insn 73 14 74 13 (set (pc)
        (label_ref 84)) -1
     (nil)
 -> 84)
(barrier 74 73 75)
(code_label 75 74 76 14 81 "" [1 uses])
(note 76 75 77 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.9243 ])
            (const_int 1073741824 [0x40000000]))) fetch-value.c:225 -1
     (nil))
(jump_insn 78 77 79 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 100)
            (pc))) fetch-value.c:225 612 {*jcc_1}
     (int_list:REG_BR_PROB 8392 (nil))
 -> 100)
(note 79 78 80 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 15 (set (reg/f:DI 131)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [4 address+0 S8 A64])) fetch-value.c:230 -1
     (nil))
(insn 81 80 82 15 (set (reg:DI 132)
        (mem:DI (reg/f:DI 131) [0 MEM[(char * {ref-all})_31]+0 S8 A8])) ../sysdeps/x86/bits/byteswap.h:111 -1
     (nil))
(insn 82 81 83 15 (set (reg:DI 90 [ D.9244 ])
        (bswap:DI (reg:DI 132))) ../sysdeps/x86/bits/byteswap.h:111 -1
     (expr_list:REG_EQUAL (bswap:DI (mem:DI (reg/f:DI 131) [0 MEM[(char * {ref-all})_31]+0 S8 A8]))
        (nil)))
(insn 83 82 13 15 (set (mem/f:DI (reg/v/f:DI 118 [ result ]) [4 *result_17(D)+0 S8 A64])
        (reg:DI 90 [ D.9244 ])) fetch-value.c:232 -1
     (nil))
(insn 13 83 93 15 (set (reg:SI 87 [ D.9242 ])
        (const_int 0 [0])) fetch-value.c:237 -1
     (nil))
(jump_insn 93 13 94 15 (set (pc)
        (label_ref 84)) -1
     (nil)
 -> 84)
(barrier 94 93 96)
(code_label 96 94 95 16 82 "" [1 uses])
(note 95 96 9 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 9 95 97 16 (set (reg:SI 87 [ D.9242 ])
        (reg/v:SI 88 [ terr ])) -1
     (nil))
(jump_insn 97 9 98 16 (set (pc)
        (label_ref 84)) -1
     (nil)
 -> 84)
(barrier 98 97 100)
(code_label 100 98 99 17 83 "" [1 uses])
(note 99 100 11 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 11 99 84 17 (set (reg:SI 87 [ D.9242 ])
        (const_int 15 [0xf])) fetch-value.c:235 -1
     (nil))
(code_label 84 11 85 18 76 "" [6 uses])
(note 85 84 86 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 90 18 (set (reg:SI 113 [ <retval> ])
        (reg:SI 87 [ D.9242 ])) -1
     (nil))
(insn 90 86 91 18 (set (reg/i:SI 0 ax)
        (reg:SI 113 [ <retval> ])) fetch-value.c:238 -1
     (nil))
(insn 91 90 0 18 (use (reg/i:SI 0 ax)) fetch-value.c:238 -1
     (nil))

;; Function _td_store_value_local (_td_store_value_local, funcdef_no=51, decl_uid=8762, cgraph_uid=51, symbol_order=53)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7

;; Generating RTL for gimple basic block 8

;; Generating RTL for gimple basic block 9

;; Generating RTL for gimple basic block 10

;; Generating RTL for gimple basic block 11

;; Generating RTL for gimple basic block 12

;; Generating RTL for gimple basic block 13
Edge 2->13 redirected to 16
Edge 11->13 redirected to 17
Purged non-fallthru edges from bb 19


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Edge 4->6 redirected to 7
Forwarding edge 5->6 to 7 failed.
Deleted label in block 6.
Removing jump 84.
Merging block 19 into block 18...
Merged blocks 18 and 19.
Merged 18 and 19 without moving.


try_optimize_cfg iteration 2

Forwarding edge 5->6 to 7 failed.


;;
;; Full RTL generated for this function:
;;
(note 1 0 16 NOTE_INSN_DELETED)
(note 16 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 16 3 2 (set (reg/v/f:DI 109 [ ta ])
        (reg:DI 5 di [ ta ])) fetch-value.c:245 -1
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 110 [ desc ])
        (reg:DI 4 si [ desc ])) fetch-value.c:245 -1
     (nil))
(insn 4 3 5 2 (set (reg/v:SI 111 [ descriptor_name ])
        (reg:SI 1 dx [ descriptor_name ])) fetch-value.c:245 -1
     (nil))
(insn 5 4 6 2 (set (reg/v/f:DI 112 [ idx ])
        (reg:DI 2 cx [ idx ])) fetch-value.c:245 -1
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [4 address+0 S8 A64])
        (reg:DI 37 r8 [ address ])) fetch-value.c:245 -1
     (nil))
(insn 7 6 8 2 (set (reg/v/f:DI 113 [ widened_value ])
        (reg:DI 38 r9 [ widened_value ])) fetch-value.c:245 -1
     (nil))
(note 8 7 18 2 NOTE_INSN_FUNCTION_BEG)
(insn 18 8 19 2 (parallel [
            (set (reg:DI 114)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) fetch-value.c:246 -1
     (nil))
(insn 19 18 20 2 (set (reg:DI 37 r8)
        (reg:DI 114)) fetch-value.c:246 -1
     (nil))
(insn 20 19 21 2 (set (reg:DI 2 cx)
        (reg/v/f:DI 112 [ idx ])) fetch-value.c:246 -1
     (nil))
(insn 21 20 22 2 (set (reg:SI 1 dx)
        (reg/v:SI 111 [ descriptor_name ])) fetch-value.c:246 -1
     (nil))
(insn 22 21 23 2 (set (reg:DI 4 si)
        (reg/v/f:DI 110 [ desc ])) fetch-value.c:246 -1
     (nil))
(insn 23 22 24 2 (set (reg:DI 5 di)
        (reg/v/f:DI 109 [ ta ])) fetch-value.c:246 -1
     (nil))
(call_insn 24 23 25 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_td_locate_field") [flags 0x3]  <function_decl 0x2b107077d0d8 _td_locate_field>) [0 _td_locate_field S1 A8])
            (const_int 0 [0]))) fetch-value.c:246 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_td_locate_field") [flags 0x3]  <function_decl 0x2b107077d0d8 _td_locate_field>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 25 24 26 2 (set (reg/v:SI 88 [ terr ])
        (reg:SI 0 ax)) fetch-value.c:246 -1
     (nil))
(insn 26 25 27 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 88 [ terr ])
            (const_int 0 [0]))) fetch-value.c:247 -1
     (nil))
(jump_insn 27 26 28 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 93)
            (pc))) fetch-value.c:247 612 {*jcc_1}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 93)
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 4 (set (reg:SI 89 [ D.9250 ])
        (mem:SI (reg/v/f:DI 110 [ desc ]) [1 *desc_5(D)+0 S4 A32])) fetch-value.c:250 -1
     (nil))
(insn 30 29 31 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.9250 ])
            (const_int 134217728 [0x8000000]))) fetch-value.c:250 -1
     (nil))
(insn 31 30 32 4 (set (reg:QI 116 [ D.9254 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fetch-value.c:250 -1
     (nil))
(insn 32 31 33 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 116 [ D.9254 ])
            (const_int 0 [0]))) fetch-value.c:250 -1
     (nil))
(jump_insn 33 32 98 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 100)
            (pc))) fetch-value.c:250 612 {*jcc_1}
     (int_list:REG_BR_PROB 995 (nil))
 -> 100)
(note 98 33 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 34 98 35 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.9250 ])
            (const_int 8 [0x8]))) fetch-value.c:250 -1
     (nil))
(insn 35 34 36 5 (set (reg:QI 118 [ D.9254 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fetch-value.c:250 -1
     (nil))
(insn 36 35 37 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 118 [ D.9254 ])
            (const_int 0 [0]))) fetch-value.c:250 -1
     (nil))
(jump_insn 37 36 99 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) fetch-value.c:250 -1
     (int_list:REG_BR_PROB 8895 (nil))
 -> 44)
(note 99 37 100 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(code_label 100 99 39 7 99 "" [1 uses])
(note 39 100 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (reg/f:DI 104 [ D.9253 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [4 address+0 S8 A64])) fetch-value.c:253 -1
     (nil))
(insn 41 40 12 7 (set (mem:QI (reg/f:DI 104 [ D.9253 ]) [0 MEM[(char * {ref-all})_35]+0 S1 A8])
        (subreg:QI (reg/v/f:DI 113 [ widened_value ]) 0)) fetch-value.c:253 -1
     (nil))
(insn 12 41 42 7 (set (reg:SI 87 [ D.9249 ])
        (const_int 0 [0])) fetch-value.c:284 -1
     (nil))
(jump_insn 42 12 43 7 (set (pc)
        (label_ref 81)) fetch-value.c:251 -1
     (nil)
 -> 81)
(barrier 43 42 44)
(code_label 44 43 45 8 92 "" [1 uses])
(note 45 44 46 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.9250 ])
            (const_int 32 [0x20]))) fetch-value.c:255 -1
     (nil))
(jump_insn 47 46 48 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) fetch-value.c:255 -1
     (int_list:REG_BR_PROB 8009 (nil))
 -> 53)
(note 48 47 49 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 9 (set (reg/f:DI 93 [ D.9253 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [4 address+0 S8 A64])) fetch-value.c:258 -1
     (nil))
(insn 50 49 10 9 (set (mem:SI (reg/f:DI 93 [ D.9253 ]) [0 MEM[(char * {ref-all})_16]+0 S4 A8])
        (subreg:SI (reg/v/f:DI 113 [ widened_value ]) 0)) fetch-value.c:258 -1
     (nil))
(insn 10 50 51 9 (set (reg:SI 87 [ D.9249 ])
        (const_int 0 [0])) fetch-value.c:284 -1
     (nil))
(jump_insn 51 10 52 9 (set (pc)
        (label_ref 81)) -1
     (nil)
 -> 81)
(barrier 52 51 53)
(code_label 53 52 54 10 94 "" [1 uses])
(note 54 53 55 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.9250 ])
            (const_int 64 [0x40]))) fetch-value.c:260 -1
     (nil))
(jump_insn 56 55 57 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) fetch-value.c:260 -1
     (int_list:REG_BR_PROB 8009 (nil))
 -> 62)
(note 57 56 58 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 11 (set (reg/f:DI 95 [ D.9253 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [4 address+0 S8 A64])) fetch-value.c:265 -1
     (nil))
(insn 59 58 15 11 (set (mem:DI (reg/f:DI 95 [ D.9253 ]) [0 MEM[(char * {ref-all})_19]+0 S8 A8])
        (reg/v/f:DI 113 [ widened_value ])) fetch-value.c:265 -1
     (nil))
(insn 15 59 60 11 (set (reg:SI 87 [ D.9249 ])
        (const_int 0 [0])) fetch-value.c:284 -1
     (nil))
(jump_insn 60 15 61 11 (set (pc)
        (label_ref 81)) -1
     (nil)
 -> 81)
(barrier 61 60 62)
(code_label 62 61 63 12 95 "" [1 uses])
(note 63 62 64 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.9250 ])
            (const_int 536870912 [0x20000000]))) fetch-value.c:267 -1
     (nil))
(jump_insn 65 64 66 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 73)
            (pc))) fetch-value.c:267 -1
     (int_list:REG_BR_PROB 8009 (nil))
 -> 73)
(note 66 65 67 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 13 (set (reg:SI 119)
        (subreg:SI (reg/v/f:DI 113 [ widened_value ]) 0)) ../sysdeps/x86/bits/byteswap.h:47 -1
     (nil))
(insn 68 67 69 13 (set (reg:SI 98 [ D.9250 ])
        (bswap:SI (reg:SI 119))) ../sysdeps/x86/bits/byteswap.h:47 -1
     (expr_list:REG_EQUAL (bswap:SI (subreg:SI (reg/v/f:DI 113 [ widened_value ]) 0))
        (nil)))
(insn 69 68 70 13 (set (reg/f:DI 99 [ D.9253 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [4 address+0 S8 A64])) fetch-value.c:271 -1
     (nil))
(insn 70 69 14 13 (set (mem:SI (reg/f:DI 99 [ D.9253 ]) [0 MEM[(char * {ref-all})_25]+0 S4 A8])
        (reg:SI 98 [ D.9250 ])) fetch-value.c:271 -1
     (nil))
(insn 14 70 71 13 (set (reg:SI 87 [ D.9249 ])
        (const_int 0 [0])) fetch-value.c:284 -1
     (nil))
(jump_insn 71 14 72 13 (set (pc)
        (label_ref 81)) -1
     (nil)
 -> 81)
(barrier 72 71 73)
(code_label 73 72 74 14 96 "" [1 uses])
(note 74 73 75 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.9250 ])
            (const_int 1073741824 [0x40000000]))) fetch-value.c:273 -1
     (nil))
(jump_insn 76 75 77 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 97)
            (pc))) fetch-value.c:273 612 {*jcc_1}
     (int_list:REG_BR_PROB 8392 (nil))
 -> 97)
(note 77 76 78 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 15 (set (reg:DI 90 [ D.9251 ])
        (bswap:DI (reg/v/f:DI 113 [ widened_value ]))) ../sysdeps/x86/bits/byteswap.h:111 -1
     (nil))
(insn 79 78 80 15 (set (reg/f:DI 101 [ D.9253 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [4 address+0 S8 A64])) fetch-value.c:279 -1
     (nil))
(insn 80 79 13 15 (set (mem:DI (reg/f:DI 101 [ D.9253 ]) [0 MEM[(char * {ref-all})_30]+0 S8 A8])
        (reg:DI 90 [ D.9251 ])) fetch-value.c:279 -1
     (nil))
(insn 13 80 90 15 (set (reg:SI 87 [ D.9249 ])
        (const_int 0 [0])) fetch-value.c:284 -1
     (nil))
(jump_insn 90 13 91 15 (set (pc)
        (label_ref 81)) -1
     (nil)
 -> 81)
(barrier 91 90 93)
(code_label 93 91 92 16 97 "" [1 uses])
(note 92 93 9 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 9 92 94 16 (set (reg:SI 87 [ D.9249 ])
        (reg/v:SI 88 [ terr ])) -1
     (nil))
(jump_insn 94 9 95 16 (set (pc)
        (label_ref 81)) -1
     (nil)
 -> 81)
(barrier 95 94 97)
(code_label 97 95 96 17 98 "" [1 uses])
(note 96 97 11 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 11 96 81 17 (set (reg:SI 87 [ D.9249 ])
        (const_int 15 [0xf])) fetch-value.c:282 -1
     (nil))
(code_label 81 11 82 18 91 "" [6 uses])
(note 82 81 83 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 87 18 (set (reg:SI 108 [ <retval> ])
        (reg:SI 87 [ D.9249 ])) -1
     (nil))
(insn 87 83 88 18 (set (reg/i:SI 0 ax)
        (reg:SI 108 [ <retval> ])) fetch-value.c:285 -1
     (nil))
(insn 88 87 0 18 (use (reg/i:SI 0 ax)) fetch-value.c:285 -1
     (nil))
