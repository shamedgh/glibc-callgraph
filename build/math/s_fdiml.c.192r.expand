
;; Function __fdiml (__fdiml, funcdef_no=36, decl_uid=7983, cgraph_uid=36, symbol_order=37)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7
Edge 2->7 redirected to 10
Edge 3->7 redirected to 11
Edge 4->7 redirected to 12
Edge 5->7 redirected to 13
Purged non-fallthru edges from bb 15


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Edge 2->5 redirected to 6
Forwarding edge 2->4 to 10 failed.
Forwarding edge 2->4 to 10 failed.
deleting block 5
Removing jump 49.
Merging block 15 into block 14...
Merged blocks 14 and 15.
Merged 14 and 15 without moving.


try_optimize_cfg iteration 2

Forwarding edge 2->4 to 10 failed.


;;
;; Full RTL generated for this function:
;;
(note 1 0 11 NOTE_INSN_DELETED)
(note 11 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 11 3 2 (set (reg/v:XF 93 [ x ])
        (mem/c:XF (reg/f:DI 81 virtual-incoming-args) [2 x+0 S16 A128])) s_fdiml.c:25 -1
     (expr_list:REG_EQUIV (mem/c:XF (reg/f:DI 81 virtual-incoming-args) [2 x+0 S16 A128])
        (nil)))
(insn 3 2 4 2 (set (reg/v:XF 94 [ y ])
        (mem/c:XF (plus:DI (reg/f:DI 81 virtual-incoming-args)
                (const_int 16 [0x10])) [2 y+0 S16 A128])) s_fdiml.c:25 -1
     (expr_list:REG_EQUIV (mem/c:XF (plus:DI (reg/f:DI 81 virtual-incoming-args)
                (const_int 16 [0x10])) [2 y+0 S16 A128])
        (nil)))
(note 4 3 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 4 14 2 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg/v:XF 94 [ y ])
            (reg/v:XF 93 [ x ]))) s_fdiml.c:26 -1
     (nil))
(jump_insn 14 13 71 2 (set (pc)
        (if_then_else (unlt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 73)
            (pc))) s_fdiml.c:26 612 {*jcc_1}
     (int_list:REG_BR_PROB 6100 (nil))
 -> 73)
(note 71 14 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 15 71 16 4 (set (pc)
        (label_ref:DI 58)) s_fdiml.c:26 654 {jump}
     (nil)
 -> 58)
(barrier 16 15 73)
(code_label 73 16 18 6 8 "" [1 uses])
(note 18 73 19 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 6 (set (reg/v:XF 88 [ r ])
        (minus:XF (reg/v:XF 93 [ x ])
            (reg/v:XF 94 [ y ]))) s_fdiml.c:29 -1
     (nil))
(insn 20 19 21 6 (set (reg:HI 96)
        (unspec:HI [
                (reg/v:XF 88 [ r ])
            ] UNSPEC_FXAM)) s_fdiml.c:30 -1
     (nil))
(insn 21 20 22 6 (parallel [
            (set (zero_extract:SI (reg:HI 96)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 96)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ]) s_fdiml.c:30 -1
     (nil))
(insn 22 21 23 6 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 96)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 5 [0x5]))) s_fdiml.c:30 -1
     (nil))
(insn 23 22 24 6 (set (reg:QI 97)
        (eq:QI (reg:CC 17 flags)
            (const_int 0 [0]))) s_fdiml.c:30 -1
     (nil))
(insn 24 23 25 6 (set (reg:SI 89 [ D.8113 ])
        (zero_extend:SI (reg:QI 97))) s_fdiml.c:30 -1
     (nil))
(insn 25 24 26 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.8113 ])
            (const_int 0 [0]))) s_fdiml.c:30 -1
     (nil))
(jump_insn 26 25 27 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 62)
            (pc))) s_fdiml.c:30 612 {*jcc_1}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 62)
(note 27 26 28 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 7 (set (reg:HI 98)
        (unspec:HI [
                (reg/v:XF 93 [ x ])
            ] UNSPEC_FXAM)) s_fdiml.c:30 -1
     (nil))
(insn 29 28 30 7 (parallel [
            (set (zero_extract:SI (reg:HI 98)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 98)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ]) s_fdiml.c:30 -1
     (nil))
(insn 30 29 31 7 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 98)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 5 [0x5]))) s_fdiml.c:30 -1
     (nil))
(insn 31 30 32 7 (set (reg:QI 99)
        (eq:QI (reg:CC 17 flags)
            (const_int 0 [0]))) s_fdiml.c:30 -1
     (nil))
(insn 32 31 33 7 (set (reg:SI 90 [ D.8113 ])
        (zero_extend:SI (reg:QI 99))) s_fdiml.c:30 -1
     (nil))
(insn 33 32 34 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ D.8113 ])
            (const_int 0 [0]))) s_fdiml.c:30 -1
     (nil))
(jump_insn 34 33 35 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 66)
            (pc))) s_fdiml.c:30 612 {*jcc_1}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 66)
(note 35 34 36 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 8 (set (reg:HI 100)
        (unspec:HI [
                (reg/v:XF 94 [ y ])
            ] UNSPEC_FXAM)) s_fdiml.c:30 -1
     (nil))
(insn 37 36 38 8 (parallel [
            (set (zero_extract:SI (reg:HI 100)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 100)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ]) s_fdiml.c:30 -1
     (nil))
(insn 38 37 39 8 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 100)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 5 [0x5]))) s_fdiml.c:30 -1
     (nil))
(insn 39 38 40 8 (set (reg:QI 101)
        (eq:QI (reg:CC 17 flags)
            (const_int 0 [0]))) s_fdiml.c:30 -1
     (nil))
(insn 40 39 41 8 (set (reg:SI 91 [ D.8113 ])
        (zero_extend:SI (reg:QI 101))) s_fdiml.c:30 -1
     (nil))
(insn 41 40 42 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 91 [ D.8113 ])
            (const_int 0 [0]))) s_fdiml.c:30 -1
     (nil))
(jump_insn 42 41 43 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 70)
            (pc))) s_fdiml.c:30 612 {*jcc_1}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 70)
(note 43 42 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 9 (set (reg:DI 102)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("errno") [flags 0x60]  <var_decl 0x2b34f87f16c0 errno>)
                    ] UNSPEC_GOTNTPOFF)) [4  S8 A8])) s_fdiml.c:31 -1
     (nil))
(insn 45 44 9 9 (set (mem/c:SI (plus:DI (unspec:DI [
                        (const_int 0 [0])
                    ] UNSPEC_TP)
                (reg:DI 102)) [1 errno+0 S4 A32])
        (const_int 34 [0x22])) s_fdiml.c:31 -1
     (nil))
(insn 9 45 55 9 (set (reg:XF 87 [ D.8112 ])
        (reg/v:XF 88 [ r ])) s_fdiml.c:31 -1
     (nil))
(jump_insn 55 9 56 9 (set (pc)
        (label_ref 46)) -1
     (nil)
 -> 46)
(barrier 56 55 58)
(code_label 58 56 57 10 4 "" [1 uses])
(note 57 58 5 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 5 57 6 10 (set (reg:SF 95)
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [3  S4 A32])) s_fdiml.c:27 -1
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 6 5 59 10 (set (reg:XF 87 [ D.8112 ])
        (float_extend:XF (reg:SF 95))) s_fdiml.c:27 -1
     (expr_list:REG_EQUAL (const_double:XF 0.0 [0x0.0p+0])
        (nil)))
(jump_insn 59 6 60 10 (set (pc)
        (label_ref 46)) -1
     (nil)
 -> 46)
(barrier 60 59 62)
(code_label 62 60 61 11 5 "" [1 uses])
(note 61 62 8 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 8 61 63 11 (set (reg:XF 87 [ D.8112 ])
        (reg/v:XF 88 [ r ])) s_fdiml.c:30 -1
     (nil))
(jump_insn 63 8 64 11 (set (pc)
        (label_ref 46)) -1
     (nil)
 -> 46)
(barrier 64 63 66)
(code_label 66 64 65 12 6 "" [1 uses])
(note 65 66 7 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 7 65 67 12 (set (reg:XF 87 [ D.8112 ])
        (reg/v:XF 88 [ r ])) s_fdiml.c:30 -1
     (nil))
(jump_insn 67 7 68 12 (set (pc)
        (label_ref 46)) -1
     (nil)
 -> 46)
(barrier 68 67 70)
(code_label 70 68 69 13 7 "" [1 uses])
(note 69 70 10 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 10 69 46 13 (set (reg:XF 87 [ D.8112 ])
        (reg/v:XF 88 [ r ])) s_fdiml.c:30 -1
     (nil))
(code_label 46 10 47 14 2 "" [4 uses])
(note 47 46 48 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 52 14 (set (reg:XF 92 [ <retval> ])
        (reg:XF 87 [ D.8112 ])) -1
     (nil))
(insn 52 48 53 14 (set (reg/i:XF 8 st)
        (reg:XF 92 [ <retval> ])) s_fdiml.c:34 -1
     (nil))
(insn 53 52 0 14 (use (reg/i:XF 8 st)) s_fdiml.c:34 -1
     (nil))
