
;; Function __pthread_register_cancel_defer (__pthread_register_cancel_defer, funcdef_no=42, decl_uid=3947, cgraph_uid=42, symbol_order=43)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6
Edge 4->4 redirected to 9


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 9 into block 8...
Merged blocks 8 and 9.
Merged 8 and 9 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/v/f:DI 97 [ buf ])
        (reg:DI 5 di [ buf ])) cleanup_defer.c:26 -1
     (nil))
(note 3 2 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 3 8 2 (parallel [
            (set (reg:DI 98 [ self ])
                (asm_operands:DI ("mov %%fs:%c1,%0") ("=r") 0 [
                        (const_int 16 [0x10])
                    ]
                     [
                        (asm_input:DI ("i") cleanup_defer.c:28)
                    ]
                     [] cleanup_defer.c:28))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer.c:28 -1
     (nil))
(insn 8 7 9 2 (set (reg/v/f:DI 89 [ self ])
        (reg:DI 98 [ self ])) cleanup_defer.c:28 -1
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg:DI 99 [ __value ])
                (asm_operands/v:DI ("movq %%fs:%P1,%q0") ("=r") 0 [
                        (const_int 768 [0x300])
                    ]
                     [
                        (asm_input:DI ("i") cleanup_defer.c:31)
                    ]
                     [] cleanup_defer.c:31))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer.c:31 -1
     (nil))
(insn 10 9 11 2 (set (reg/v/f:DI 90 [ __value ])
        (reg:DI 99 [ __value ])) cleanup_defer.c:31 -1
     (nil))
(insn 11 10 12 2 (set (mem/f:DI (plus:DI (reg/v/f:DI 97 [ buf ])
                (const_int 72 [0x48])) [0 MEM[(struct pthread_unwind_buf *)buf_3(D)].priv.data.prev+0 S8 A64])
        (reg/v/f:DI 90 [ __value ])) cleanup_defer.c:31 -1
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:DI 100 [ __value ])
                (asm_operands/v:DI ("movq %%fs:%P1,%q0") ("=r") 0 [
                        (const_int 760 [0x2f8])
                    ]
                     [
                        (asm_input:DI ("i") cleanup_defer.c:32)
                    ]
                     [] cleanup_defer.c:32))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer.c:32 -1
     (nil))
(insn 13 12 14 2 (set (reg/v/f:DI 91 [ __value ])
        (reg:DI 100 [ __value ])) cleanup_defer.c:32 -1
     (nil))
(insn 14 13 15 2 (set (mem/f:DI (plus:DI (reg/v/f:DI 97 [ buf ])
                (const_int 80 [0x50])) [0 MEM[(struct pthread_unwind_buf *)buf_3(D)].priv.data.cleanup+0 S8 A64])
        (reg/v/f:DI 91 [ __value ])) cleanup_defer.c:32 -1
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg:SI 101 [ cancelhandling ])
                (asm_operands/v:SI ("movl %%fs:%P1,%0") ("=r") 0 [
                        (const_int 776 [0x308])
                    ]
                     [
                        (asm_input:DI ("i") cleanup_defer.c:34)
                    ]
                     [] cleanup_defer.c:34))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer.c:34 -1
     (nil))
(insn 16 15 17 2 (set (reg/v:SI 87 [ cancelhandling ])
        (reg:SI 101 [ cancelhandling ])) cleanup_defer.c:34 -1
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg:SI 88 [ D.7707 ])
                (and:SI (reg/v:SI 87 [ cancelhandling ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 88 [ D.7707 ])
            (const_int 0 [0]))) cleanup_defer.c:37 -1
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) cleanup_defer.c:37 -1
     (int_list:REG_BR_PROB 9000 (nil))
 -> 30)
(note 20 19 39 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 39 20 40 4 (set (pc)
        (label_ref 25)) -1
     (nil)
 -> 25)
(barrier 40 39 42)
(code_label 42 40 41 5 4 "" [1 uses])
(note 41 42 4 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 4 41 25 5 (set (reg/v:SI 87 [ cancelhandling ])
        (reg/v:SI 93 [ cancelhandling ])) -1
     (nil))
(code_label 25 4 21 6 3 "" [1 uses])
(note 21 25 22 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 6 (parallel [
            (set (reg:SI 92 [ D.7707 ])
                (and:SI (reg/v:SI 87 [ cancelhandling ])
                    (const_int -3 [0xfffffffffffffffd])))
            (clobber (reg:CC 17 flags))
        ]) cleanup_defer.c:40 -1
     (nil))
(insn 23 22 24 6 (parallel [
            (set (reg:SI 102 [ cancelhandling ])
                (asm_operands/v:SI ("lock;cmpxchgl %2, %%fs:%P3") ("=a") 0 [
                        (reg/v:SI 87 [ cancelhandling ])
                        (reg:SI 92 [ D.7707 ])
                        (const_int 776 [0x308])
                    ]
                     [
                        (asm_input:SI ("0") cleanup_defer.c:40)
                        (asm_input:SI ("r") cleanup_defer.c:40)
                        (asm_input:DI ("i") cleanup_defer.c:40)
                    ]
                     [] cleanup_defer.c:40))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer.c:40 -1
     (nil))
(insn 24 23 26 6 (set (reg/v:SI 93 [ cancelhandling ])
        (reg:SI 102 [ cancelhandling ])) cleanup_defer.c:40 -1
     (nil))
(insn 26 24 27 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 87 [ cancelhandling ])
            (reg/v:SI 93 [ cancelhandling ]))) cleanup_defer.c:44 -1
     (nil))
(jump_insn 27 26 28 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 42)
            (pc))) cleanup_defer.c:44 612 {*jcc_1}
     (int_list:REG_BR_PROB 1000 (nil))
 -> 42)
(note 28 27 29 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 7 (parallel [
            (set (reg:SI 88 [ D.7707 ])
                (and:SI (reg/v:SI 93 [ cancelhandling ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(code_label 30 29 31 8 2 "" [1 uses])
(note 31 30 32 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 88 [ D.7707 ])
            (const_int 0 [0]))) cleanup_defer.c:52 -1
     (nil))
(insn 33 32 34 8 (set (reg:QI 104)
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) cleanup_defer.c:52 -1
     (nil))
(insn 34 33 35 8 (set (reg:SI 103 [ D.7708 ])
        (zero_extend:SI (reg:QI 104))) cleanup_defer.c:52 -1
     (nil))
(insn 35 34 36 8 (set (mem:SI (plus:DI (reg/v/f:DI 97 [ buf ])
                (const_int 88 [0x58])) [0 MEM[(struct pthread_unwind_buf *)buf_3(D)].priv.data.canceltype+0 S4 A64])
        (reg:SI 103 [ D.7708 ])) cleanup_defer.c:52 -1
     (nil))
(insn 36 35 0 8 (parallel [
            (asm_operands/v ("movq %q0,%%fs:%P1") ("") 0 [
                    (reg/v/f:DI 97 [ buf ])
                    (const_int 768 [0x300])
                ]
                 [
                    (asm_input:DI ("ir") cleanup_defer.c:57)
                    (asm_input:DI ("i") cleanup_defer.c:57)
                ]
                 [] cleanup_defer.c:57)
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer.c:57 -1
     (nil))

;; Function __pthread_unregister_cancel_restore (__pthread_unregister_cancel_restore, funcdef_no=43, decl_uid=3949, cgraph_uid=43, symbol_order=44)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7

;; Generating RTL for gimple basic block 8
Edge 5->5 redirected to 11


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Edge 2->10 redirected to 11
Edge 4->10 redirected to 11
Edge 8->10 redirected to 11
deleting block 10


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/v/f:DI 100 [ buf ])
        (reg:DI 5 di [ buf ])) cleanup_defer.c:64 -1
     (nil))
(note 3 2 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 3 8 2 (parallel [
            (set (reg:DI 101 [ self ])
                (asm_operands:DI ("mov %%fs:%c1,%0") ("=r") 0 [
                        (const_int 16 [0x10])
                    ]
                     [
                        (asm_input:DI ("i") cleanup_defer.c:65)
                    ]
                     [] cleanup_defer.c:65))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer.c:65 -1
     (nil))
(insn 8 7 9 2 (set (reg/v/f:DI 88 [ self ])
        (reg:DI 101 [ self ])) cleanup_defer.c:65 -1
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 102)
        (mem/f:DI (plus:DI (reg/v/f:DI 100 [ buf ])
                (const_int 72 [0x48])) [0 MEM[(struct pthread_unwind_buf *)buf_3(D)].priv.data.prev+0 S8 A64])) cleanup_defer.c:68 -1
     (nil))
(insn 10 9 11 2 (parallel [
            (asm_operands/v ("movq %q0,%%fs:%P1") ("") 0 [
                    (reg/f:DI 102)
                    (const_int 768 [0x300])
                ]
                 [
                    (asm_input:DI ("ir") cleanup_defer.c:68)
                    (asm_input:DI ("i") cleanup_defer.c:68)
                ]
                 [] cleanup_defer.c:68)
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer.c:68 -1
     (nil))
(insn 11 10 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 100 [ buf ])
                    (const_int 88 [0x58])) [0 MEM[(struct pthread_unwind_buf *)buf_3(D)].priv.data.canceltype+0 S4 A64])
            (const_int 0 [0]))) cleanup_defer.c:71 -1
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 45)
            (pc))) cleanup_defer.c:71 612 {*jcc_1}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 45)
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (parallel [
            (set (reg:SI 103 [ __old ])
                (asm_operands/v:SI ("movl %%fs:%P1,%0") ("=r") 0 [
                        (const_int 776 [0x308])
                    ]
                     [
                        (asm_input:DI ("i") cleanup_defer.c:72)
                    ]
                     [] cleanup_defer.c:72))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer.c:72 -1
     (nil))
(insn 15 14 16 4 (set (reg/v:SI 87 [ __old ])
        (reg:SI 103 [ __old ])) cleanup_defer.c:72 -1
     (nil))
(insn 16 15 17 4 (parallel [
            (set (reg:SI 104 [ D.7719 ])
                (and:SI (reg/v:SI 87 [ __old ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) cleanup_defer.c:72 -1
     (nil))
(insn 17 16 18 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 104 [ D.7719 ])
            (const_int 0 [0]))) cleanup_defer.c:72 -1
     (nil))
(jump_insn 18 17 19 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 45)
            (pc))) cleanup_defer.c:72 612 {*jcc_1}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 45)
(note 19 18 47 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 47 19 48 5 (set (pc)
        (label_ref 24)) -1
     (nil)
 -> 24)
(barrier 48 47 50)
(code_label 50 48 49 6 12 "" [1 uses])
(note 49 50 4 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 4 49 24 6 (set (reg/v:SI 87 [ __old ])
        (reg/v:SI 94 [ __old ])) -1
     (nil))
(code_label 24 4 20 7 11 "" [1 uses])
(note 20 24 21 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 7 (parallel [
            (set (reg:SI 93 [ D.7719 ])
                (ior:SI (reg/v:SI 87 [ __old ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) cleanup_defer.c:77 -1
     (nil))
(insn 22 21 23 7 (parallel [
            (set (reg:SI 105 [ __old ])
                (asm_operands/v:SI ("lock;cmpxchgl %2, %%fs:%P3") ("=a") 0 [
                        (reg/v:SI 87 [ __old ])
                        (reg:SI 93 [ D.7719 ])
                        (const_int 776 [0x308])
                    ]
                     [
                        (asm_input:SI ("0") cleanup_defer.c:77)
                        (asm_input:SI ("r") cleanup_defer.c:77)
                        (asm_input:DI ("i") cleanup_defer.c:77)
                    ]
                     [] cleanup_defer.c:77))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer.c:77 -1
     (nil))
(insn 23 22 25 7 (set (reg/v:SI 94 [ __old ])
        (reg:SI 105 [ __old ])) cleanup_defer.c:77 -1
     (nil))
(insn 25 23 26 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 87 [ __old ])
            (reg/v:SI 94 [ __old ]))) cleanup_defer.c:81 -1
     (nil))
(jump_insn 26 25 27 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 50)
            (pc))) cleanup_defer.c:81 612 {*jcc_1}
     (int_list:REG_BR_PROB 1000 (nil))
 -> 50)
(note 27 26 28 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 8 (parallel [
            (set (reg:SI 106 [ cancelhandling ])
                (asm_operands/v:SI ("movl %%fs:%P1,%0") ("=r") 0 [
                        (const_int 776 [0x308])
                    ]
                     [
                        (asm_input:DI ("i") cleanup_defer.c:89)
                    ]
                     [] cleanup_defer.c:89))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer.c:89 -1
     (nil))
(insn 29 28 30 8 (set (reg/v:SI 95 [ cancelhandling ])
        (reg:SI 106 [ cancelhandling ])) cleanup_defer.c:89 -1
     (nil))
(insn 30 29 31 8 (parallel [
            (set (reg:SI 107 [ D.7720 ])
                (and:SI (reg/v:SI 95 [ cancelhandling ])
                    (const_int -71 [0xffffffffffffffb9])))
            (clobber (reg:CC 17 flags))
        ]) cleanup_defer.c:89 -1
     (nil))
(insn 31 30 32 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 107 [ D.7720 ])
            (const_int 8 [0x8]))) cleanup_defer.c:89 -1
     (nil))
(jump_insn 32 31 33 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 45)
            (pc))) cleanup_defer.c:89 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 45)
(note 33 32 34 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 9 (parallel [
            (asm_operands/v ("movq %q0,%%fs:%P1") ("") 0 [
                    (const_int -1 [0xffffffffffffffff])
                    (const_int 1584 [0x630])
                ]
                 [
                    (asm_input:DI ("ir") cleanup_defer.c:89)
                    (asm_input:DI ("i") cleanup_defer.c:89)
                ]
                 [] cleanup_defer.c:89)
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer.c:89 -1
     (nil))
(insn 35 34 36 9 (parallel [
            (set (reg:DI 108 [ self ])
                (asm_operands:DI ("mov %%fs:%c1,%0") ("=r") 0 [
                        (const_int 16 [0x10])
                    ]
                     [
                        (asm_input:DI ("i") pthreadP.h:278)
                    ]
                     [] pthreadP.h:278))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) pthreadP.h:278 -1
     (nil))
(insn 36 35 37 9 (set (reg/v/f:DI 98 [ self ])
        (reg:DI 108 [ self ])) pthreadP.h:278 -1
     (nil))
(insn 37 36 38 9 (parallel [
            (asm_operands/v ("lock;orl %1, %%fs:%P0") ("") 0 [
                    (const_int 776 [0x308])
                    (const_int 16 [0x10])
                ]
                 [
                    (asm_input:DI ("i") pthreadP.h:281)
                    (asm_input:SI ("ir") pthreadP.h:281)
                ]
                 [] pthreadP.h:281)
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) pthreadP.h:281 -1
     (nil))
(insn 38 37 39 9 (parallel [
            (set (reg:DI 109 [ __value ])
                (asm_operands/v:DI ("movq %%fs:%P1,%q0") ("=r") 0 [
                        (const_int 768 [0x300])
                    ]
                     [
                        (asm_input:DI ("i") pthreadP.h:284)
                    ]
                     [] pthreadP.h:284))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) pthreadP.h:284 -1
     (nil))
(insn 39 38 40 9 (set (reg/v/f:DI 99 [ __value ])
        (reg:DI 109 [ __value ])) pthreadP.h:284 -1
     (nil))
(insn 40 39 41 9 (set (reg:DI 5 di)
        (reg/v/f:DI 99 [ __value ])) pthreadP.h:283 -1
     (nil))
(call_insn 41 40 42 9 (call (mem:QI (symbol_ref:DI ("__pthread_unwind") [flags 0x41]  <function_decl 0x2b2e530eca20 __pthread_unwind>) [0 __pthread_unwind S1 A8])
        (const_int 0 [0])) pthreadP.h:283 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__pthread_unwind") [flags 0x41]  <function_decl 0x2b2e530eca20 __pthread_unwind>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(barrier 42 41 45)
(code_label 45 42 46 11 9 "" [3 uses])
(note 46 45 0 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
