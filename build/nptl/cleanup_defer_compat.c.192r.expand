
;; Function _pthread_cleanup_push_defer (_pthread_cleanup_push_defer, funcdef_no=42, decl_uid=7516, cgraph_uid=42, symbol_order=43)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6
Edge 4->4 redirected to 9


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 9 into block 8...
Merged blocks 8 and 9.
Merged 8 and 9 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 7 NOTE_INSN_DELETED)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (reg/v/f:DI 96 [ buffer ])
        (reg:DI 5 di [ buffer ])) cleanup_defer_compat.c:25 -1
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 97 [ routine ])
        (reg:DI 4 si [ routine ])) cleanup_defer_compat.c:25 -1
     (nil))
(insn 4 3 5 2 (set (reg/v/f:DI 98 [ arg ])
        (reg:DI 1 dx [ arg ])) cleanup_defer_compat.c:25 -1
     (nil))
(note 5 4 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 5 10 2 (parallel [
            (set (reg:DI 99 [ self ])
                (asm_operands:DI ("mov %%fs:%c1,%0") ("=r") 0 [
                        (const_int 16 [0x10])
                    ]
                     [
                        (asm_input:DI ("i") cleanup_defer_compat.c:26)
                    ]
                     [] cleanup_defer_compat.c:26))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer_compat.c:26 -1
     (nil))
(insn 10 9 11 2 (set (reg/v/f:DI 88 [ self ])
        (reg:DI 99 [ self ])) cleanup_defer_compat.c:26 -1
     (nil))
(insn 11 10 12 2 (set (mem/f:DI (reg/v/f:DI 96 [ buffer ]) [2 buffer_5(D)->__routine+0 S8 A64])
        (reg/v/f:DI 97 [ routine ])) cleanup_defer_compat.c:28 -1
     (nil))
(insn 12 11 13 2 (set (mem/f:DI (plus:DI (reg/v/f:DI 96 [ buffer ])
                (const_int 8 [0x8])) [2 buffer_5(D)->__arg+0 S8 A64])
        (reg/v/f:DI 98 [ arg ])) cleanup_defer_compat.c:29 -1
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 100 [ __value ])
                (asm_operands/v:DI ("movq %%fs:%P1,%q0") ("=r") 0 [
                        (const_int 760 [0x2f8])
                    ]
                     [
                        (asm_input:DI ("i") cleanup_defer_compat.c:30)
                    ]
                     [] cleanup_defer_compat.c:30))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer_compat.c:30 -1
     (nil))
(insn 14 13 15 2 (set (reg/v/f:DI 89 [ __value ])
        (reg:DI 100 [ __value ])) cleanup_defer_compat.c:30 -1
     (nil))
(insn 15 14 16 2 (set (mem/f:DI (plus:DI (reg/v/f:DI 96 [ buffer ])
                (const_int 24 [0x18])) [2 buffer_5(D)->__prev+0 S8 A64])
        (reg/v/f:DI 89 [ __value ])) cleanup_defer_compat.c:30 -1
     (nil))
(insn 16 15 17 2 (parallel [
            (set (reg:SI 101 [ cancelhandling ])
                (asm_operands/v:SI ("movl %%fs:%P1,%0") ("=r") 0 [
                        (const_int 776 [0x308])
                    ]
                     [
                        (asm_input:DI ("i") cleanup_defer_compat.c:32)
                    ]
                     [] cleanup_defer_compat.c:32))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer_compat.c:32 -1
     (nil))
(insn 17 16 18 2 (set (reg/v:SI 87 [ cancelhandling ])
        (reg:SI 101 [ cancelhandling ])) cleanup_defer_compat.c:32 -1
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg:SI 90 [ D.7724 ])
                (and:SI (reg/v:SI 87 [ cancelhandling ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(insn 19 18 20 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ D.7724 ])
            (const_int 0 [0]))) cleanup_defer_compat.c:35 -1
     (nil))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) cleanup_defer_compat.c:35 -1
     (int_list:REG_BR_PROB 9000 (nil))
 -> 31)
(note 21 20 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 40 21 41 4 (set (pc)
        (label_ref 26)) -1
     (nil)
 -> 26)
(barrier 41 40 43)
(code_label 43 41 42 5 4 "" [1 uses])
(note 42 43 6 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 6 42 26 5 (set (reg/v:SI 87 [ cancelhandling ])
        (reg/v:SI 92 [ cancelhandling ])) -1
     (nil))
(code_label 26 6 22 6 3 "" [1 uses])
(note 22 26 23 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 6 (parallel [
            (set (reg:SI 91 [ D.7724 ])
                (and:SI (reg/v:SI 87 [ cancelhandling ])
                    (const_int -3 [0xfffffffffffffffd])))
            (clobber (reg:CC 17 flags))
        ]) cleanup_defer_compat.c:38 -1
     (nil))
(insn 24 23 25 6 (parallel [
            (set (reg:SI 102 [ cancelhandling ])
                (asm_operands/v:SI ("lock;cmpxchgl %2, %%fs:%P3") ("=a") 0 [
                        (reg/v:SI 87 [ cancelhandling ])
                        (reg:SI 91 [ D.7724 ])
                        (const_int 776 [0x308])
                    ]
                     [
                        (asm_input:SI ("0") cleanup_defer_compat.c:38)
                        (asm_input:SI ("r") cleanup_defer_compat.c:38)
                        (asm_input:DI ("i") cleanup_defer_compat.c:38)
                    ]
                     [] cleanup_defer_compat.c:38))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer_compat.c:38 -1
     (nil))
(insn 25 24 27 6 (set (reg/v:SI 92 [ cancelhandling ])
        (reg:SI 102 [ cancelhandling ])) cleanup_defer_compat.c:38 -1
     (nil))
(insn 27 25 28 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 87 [ cancelhandling ])
            (reg/v:SI 92 [ cancelhandling ]))) cleanup_defer_compat.c:42 -1
     (nil))
(jump_insn 28 27 29 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 43)
            (pc))) cleanup_defer_compat.c:42 612 {*jcc_1}
     (int_list:REG_BR_PROB 1000 (nil))
 -> 43)
(note 29 28 30 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 7 (parallel [
            (set (reg:SI 90 [ D.7724 ])
                (and:SI (reg/v:SI 92 [ cancelhandling ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) -1
     (nil))
(code_label 31 30 32 8 2 "" [1 uses])
(note 32 31 33 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ D.7724 ])
            (const_int 0 [0]))) cleanup_defer_compat.c:50 -1
     (nil))
(insn 34 33 35 8 (set (reg:QI 104)
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) cleanup_defer_compat.c:50 -1
     (nil))
(insn 35 34 36 8 (set (reg:SI 103 [ D.7725 ])
        (zero_extend:SI (reg:QI 104))) cleanup_defer_compat.c:50 -1
     (nil))
(insn 36 35 37 8 (set (mem:SI (plus:DI (reg/v/f:DI 96 [ buffer ])
                (const_int 16 [0x10])) [3 buffer_5(D)->__canceltype+0 S4 A64])
        (reg:SI 103 [ D.7725 ])) cleanup_defer_compat.c:50 -1
     (nil))
(insn 37 36 0 8 (parallel [
            (asm_operands/v ("movq %q0,%%fs:%P1") ("") 0 [
                    (reg/v/f:DI 96 [ buffer ])
                    (const_int 760 [0x2f8])
                ]
                 [
                    (asm_input:DI ("ir") cleanup_defer_compat.c:54)
                    (asm_input:DI ("i") cleanup_defer_compat.c:54)
                ]
                 [] cleanup_defer_compat.c:54)
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer_compat.c:54 -1
     (nil))

;; Function _pthread_cleanup_pop_restore (_pthread_cleanup_pop_restore, funcdef_no=43, decl_uid=7519, cgraph_uid=44, symbol_order=45)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7

;; Generating RTL for gimple basic block 8

;; Generating RTL for gimple basic block 9

;; Generating RTL for gimple basic block 10
Edge 5->5 redirected to 13


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Edge 10->12 redirected to 13
deleting block 12


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg/v/f:DI 102 [ buffer ])
        (reg:DI 5 di [ buffer ])) cleanup_defer_compat.c:62 -1
     (nil))
(insn 3 2 4 2 (set (reg/v:SI 103 [ execute ])
        (reg:SI 4 si [ execute ])) cleanup_defer_compat.c:62 -1
     (nil))
(note 4 3 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 4 9 2 (parallel [
            (set (reg:DI 104 [ self ])
                (asm_operands:DI ("mov %%fs:%c1,%0") ("=r") 0 [
                        (const_int 16 [0x10])
                    ]
                     [
                        (asm_input:DI ("i") cleanup_defer_compat.c:63)
                    ]
                     [] cleanup_defer_compat.c:63))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer_compat.c:63 -1
     (nil))
(insn 9 8 10 2 (set (reg/v/f:DI 88 [ self ])
        (reg:DI 104 [ self ])) cleanup_defer_compat.c:63 -1
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 105)
        (mem/f:DI (plus:DI (reg/v/f:DI 102 [ buffer ])
                (const_int 24 [0x18])) [2 buffer_4(D)->__prev+0 S8 A64])) cleanup_defer_compat.c:65 -1
     (nil))
(insn 11 10 12 2 (parallel [
            (asm_operands/v ("movq %q0,%%fs:%P1") ("") 0 [
                    (reg/f:DI 105)
                    (const_int 760 [0x2f8])
                ]
                 [
                    (asm_input:DI ("ir") cleanup_defer_compat.c:65)
                    (asm_input:DI ("i") cleanup_defer_compat.c:65)
                ]
                 [] cleanup_defer_compat.c:65)
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer_compat.c:65 -1
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 102 [ buffer ])
                    (const_int 16 [0x10])) [3 buffer_4(D)->__canceltype+0 S4 A64])
            (const_int 0 [0]))) cleanup_defer_compat.c:68 -1
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) cleanup_defer_compat.c:68 -1
     (int_list:REG_BR_PROB 9000 (nil))
 -> 44)
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (parallel [
            (set (reg:SI 106 [ __old ])
                (asm_operands/v:SI ("movl %%fs:%P1,%0") ("=r") 0 [
                        (const_int 776 [0x308])
                    ]
                     [
                        (asm_input:DI ("i") cleanup_defer_compat.c:69)
                    ]
                     [] cleanup_defer_compat.c:69))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer_compat.c:69 -1
     (nil))
(insn 16 15 17 4 (set (reg/v:SI 87 [ __old ])
        (reg:SI 106 [ __old ])) cleanup_defer_compat.c:69 -1
     (nil))
(insn 17 16 18 4 (parallel [
            (set (reg:SI 107 [ D.7748 ])
                (and:SI (reg/v:SI 87 [ __old ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) cleanup_defer_compat.c:69 -1
     (nil))
(insn 18 17 19 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 107 [ D.7748 ])
            (const_int 0 [0]))) cleanup_defer_compat.c:69 -1
     (nil))
(jump_insn 19 18 20 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) cleanup_defer_compat.c:69 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 44)
(note 20 19 58 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 58 20 59 5 (set (pc)
        (label_ref 25)) -1
     (nil)
 -> 25)
(barrier 59 58 61)
(code_label 61 59 60 6 13 "" [1 uses])
(note 60 61 5 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 5 60 25 6 (set (reg/v:SI 87 [ __old ])
        (reg/v:SI 94 [ __old ])) -1
     (nil))
(code_label 25 5 21 7 11 "" [1 uses])
(note 21 25 22 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 7 (parallel [
            (set (reg:SI 93 [ D.7748 ])
                (ior:SI (reg/v:SI 87 [ __old ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) cleanup_defer_compat.c:74 -1
     (nil))
(insn 23 22 24 7 (parallel [
            (set (reg:SI 108 [ __old ])
                (asm_operands/v:SI ("lock;cmpxchgl %2, %%fs:%P3") ("=a") 0 [
                        (reg/v:SI 87 [ __old ])
                        (reg:SI 93 [ D.7748 ])
                        (const_int 776 [0x308])
                    ]
                     [
                        (asm_input:SI ("0") cleanup_defer_compat.c:74)
                        (asm_input:SI ("r") cleanup_defer_compat.c:74)
                        (asm_input:DI ("i") cleanup_defer_compat.c:74)
                    ]
                     [] cleanup_defer_compat.c:74))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer_compat.c:74 -1
     (nil))
(insn 24 23 26 7 (set (reg/v:SI 94 [ __old ])
        (reg:SI 108 [ __old ])) cleanup_defer_compat.c:74 -1
     (nil))
(insn 26 24 27 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 87 [ __old ])
            (reg/v:SI 94 [ __old ]))) cleanup_defer_compat.c:78 -1
     (nil))
(jump_insn 27 26 28 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 61)
            (pc))) cleanup_defer_compat.c:78 612 {*jcc_1}
     (int_list:REG_BR_PROB 1000 (nil))
 -> 61)
(note 28 27 29 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 8 (parallel [
            (set (reg:SI 109 [ cancelhandling ])
                (asm_operands/v:SI ("movl %%fs:%P1,%0") ("=r") 0 [
                        (const_int 776 [0x308])
                    ]
                     [
                        (asm_input:DI ("i") cleanup_defer_compat.c:86)
                    ]
                     [] cleanup_defer_compat.c:86))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer_compat.c:86 -1
     (nil))
(insn 30 29 31 8 (set (reg/v:SI 95 [ cancelhandling ])
        (reg:SI 109 [ cancelhandling ])) cleanup_defer_compat.c:86 -1
     (nil))
(insn 31 30 32 8 (parallel [
            (set (reg:SI 110 [ D.7749 ])
                (and:SI (reg/v:SI 95 [ cancelhandling ])
                    (const_int -71 [0xffffffffffffffb9])))
            (clobber (reg:CC 17 flags))
        ]) cleanup_defer_compat.c:86 -1
     (nil))
(insn 32 31 33 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 110 [ D.7749 ])
            (const_int 8 [0x8]))) cleanup_defer_compat.c:86 -1
     (nil))
(jump_insn 33 32 34 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) cleanup_defer_compat.c:86 -1
     (int_list:REG_BR_PROB 9996 (nil))
 -> 44)
(note 34 33 35 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 9 (parallel [
            (asm_operands/v ("movq %q0,%%fs:%P1") ("") 0 [
                    (const_int -1 [0xffffffffffffffff])
                    (const_int 1584 [0x630])
                ]
                 [
                    (asm_input:DI ("ir") cleanup_defer_compat.c:86)
                    (asm_input:DI ("i") cleanup_defer_compat.c:86)
                ]
                 [] cleanup_defer_compat.c:86)
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) cleanup_defer_compat.c:86 -1
     (nil))
(insn 36 35 37 9 (parallel [
            (set (reg:DI 111 [ self ])
                (asm_operands:DI ("mov %%fs:%c1,%0") ("=r") 0 [
                        (const_int 16 [0x10])
                    ]
                     [
                        (asm_input:DI ("i") pthreadP.h:278)
                    ]
                     [] pthreadP.h:278))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) pthreadP.h:278 -1
     (nil))
(insn 37 36 38 9 (set (reg/v/f:DI 100 [ self ])
        (reg:DI 111 [ self ])) pthreadP.h:278 -1
     (nil))
(insn 38 37 39 9 (parallel [
            (asm_operands/v ("lock;orl %1, %%fs:%P0") ("") 0 [
                    (const_int 776 [0x308])
                    (const_int 16 [0x10])
                ]
                 [
                    (asm_input:DI ("i") pthreadP.h:281)
                    (asm_input:SI ("ir") pthreadP.h:281)
                ]
                 [] pthreadP.h:281)
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) pthreadP.h:281 -1
     (nil))
(insn 39 38 40 9 (parallel [
            (set (reg:DI 112 [ __value ])
                (asm_operands/v:DI ("movq %%fs:%P1,%q0") ("=r") 0 [
                        (const_int 768 [0x300])
                    ]
                     [
                        (asm_input:DI ("i") pthreadP.h:284)
                    ]
                     [] pthreadP.h:284))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ]) pthreadP.h:284 -1
     (nil))
(insn 40 39 41 9 (set (reg/v/f:DI 101 [ __value ])
        (reg:DI 112 [ __value ])) pthreadP.h:284 -1
     (nil))
(insn 41 40 42 9 (set (reg:DI 5 di)
        (reg/v/f:DI 101 [ __value ])) pthreadP.h:283 -1
     (nil))
(call_insn 42 41 43 9 (call (mem:QI (symbol_ref:DI ("__pthread_unwind") [flags 0x41]  <function_decl 0x2b9dca749a20 __pthread_unwind>) [0 __pthread_unwind S1 A8])
        (const_int 0 [0])) pthreadP.h:283 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__pthread_unwind") [flags 0x41]  <function_decl 0x2b9dca749a20 __pthread_unwind>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(barrier 43 42 44)
(code_label 44 43 45 10 10 "" [3 uses])
(note 45 44 46 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 103 [ execute ])
            (const_int 0 [0]))) cleanup_defer_compat.c:91 -1
     (nil))
(jump_insn 47 46 48 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 56)
            (pc))) cleanup_defer_compat.c:91 612 {*jcc_1}
     (int_list:REG_BR_PROB 6102 (nil))
 -> 56)
(note 48 47 49 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 11 (set (reg:DI 113)
        (mem/f:DI (plus:DI (reg/v/f:DI 102 [ buffer ])
                (const_int 8 [0x8])) [2 buffer_4(D)->__arg+0 S8 A64])) cleanup_defer_compat.c:92 -1
     (nil))
(insn 50 49 51 11 (set (reg/f:DI 114)
        (mem/f:DI (reg/v/f:DI 102 [ buffer ]) [2 buffer_4(D)->__routine+0 S8 A64])) cleanup_defer_compat.c:92 -1
     (nil))
(insn 51 50 52 11 (set (reg:DI 5 di)
        (reg:DI 113)) cleanup_defer_compat.c:92 -1
     (nil))
(call_insn/j 52 51 53 11 (call (mem:QI (reg/f:DI 114) [0 *_24 S1 A8])
        (const_int 0 [0])) cleanup_defer_compat.c:92 -1
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(barrier 53 52 56)
(code_label 56 53 57 13 9 "" [1 uses])
(note 57 56 0 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
