
;; Function insque (insque, funcdef_no=0, decl_uid=1845, cgraph_uid=0, symbol_order=0)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Redirecting jump 12 from 8 to 9.
Merging block 8 into block 7...
Merged blocks 7 and 8.
Merged 7 and 8 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/v/f:DI 88 [ elem ])
        (reg:DI 5 di [ elem ])) insremque.c:25 -1
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 89 [ prev ])
        (reg:DI 4 si [ prev ])) insremque.c:25 -1
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 89 [ prev ])
            (const_int 0 [0]))) insremque.c:26 -1
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 14)
            (pc))) insremque.c:26 -1
     (int_list:REG_BR_PROB 8986 (nil))
 -> 14)
(note 9 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 4 (set (mem/f:DI (reg/v/f:DI 88 [ elem ]) [2 MEM[(struct qelem *)elem_5(D)].q_forw+0 S8 A64])
        (const_int 0 [0])) insremque.c:28 -1
     (nil))
(insn 11 10 12 4 (set (mem/f:DI (plus:DI (reg/v/f:DI 88 [ elem ])
                (const_int 8 [0x8])) [2 MEM[(struct qelem *)elem_5(D)].q_back+0 S8 A64])
        (const_int 0 [0])) insremque.c:29 -1
     (nil))
(jump_insn 12 11 13 4 (set (pc)
        (label_ref:DI 28)) 654 {jump}
     (nil)
 -> 28)
(barrier 13 12 14)
(code_label 14 13 15 5 2 "" [1 uses])
(note 15 14 16 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 5 (set (reg/v/f:DI 87 [ next ])
        (mem/f:DI (reg/v/f:DI 89 [ prev ]) [2 MEM[(struct qelem *)prev_3(D)].q_forw+0 S8 A64])) insremque.c:33 -1
     (nil))
(insn 17 16 18 5 (set (mem/f:DI (reg/v/f:DI 89 [ prev ]) [2 MEM[(struct qelem *)prev_3(D)].q_forw+0 S8 A64])
        (reg/v/f:DI 88 [ elem ])) insremque.c:34 -1
     (nil))
(insn 18 17 19 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 87 [ next ])
            (const_int 0 [0]))) insremque.c:35 -1
     (nil))
(jump_insn 19 18 20 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) insremque.c:35 -1
     (int_list:REG_BR_PROB 1500 (nil))
 -> 22)
(note 20 19 21 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 6 (set (mem/f:DI (plus:DI (reg/v/f:DI 87 [ next ])
                (const_int 8 [0x8])) [2 next_8->q_back+0 S8 A64])
        (reg/v/f:DI 88 [ elem ])) insremque.c:36 -1
     (nil))
(code_label 22 21 23 7 4 "" [1 uses])
(note 23 22 24 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 7 (set (mem/f:DI (reg/v/f:DI 88 [ elem ]) [2 MEM[(struct qelem *)elem_5(D)].q_forw+0 S8 A64])
        (reg/v/f:DI 87 [ next ])) insremque.c:37 -1
     (nil))
(insn 25 24 28 7 (set (mem/f:DI (plus:DI (reg/v/f:DI 88 [ elem ])
                (const_int 8 [0x8])) [2 MEM[(struct qelem *)elem_5(D)].q_back+0 S8 A64])
        (reg/v/f:DI 89 [ prev ])) insremque.c:38 -1
     (nil))
(code_label 28 25 29 9 1 "" [1 uses])
(note 29 28 0 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

;; Function remque (remque, funcdef_no=1, decl_uid=1847, cgraph_uid=1, symbol_order=1)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Edge 5->7 redirected to 8
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 89 [ elem ])
        (reg:DI 5 di [ elem ])) insremque.c:46 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/v/f:DI 87 [ next ])
        (mem/f:DI (reg/v/f:DI 89 [ elem ]) [2 MEM[(struct qelem *)elem_4(D)].q_forw+0 S8 A64])) insremque.c:47 -1
     (nil))
(insn 7 6 8 2 (set (reg/v/f:DI 88 [ prev ])
        (mem/f:DI (plus:DI (reg/v/f:DI 89 [ elem ])
                (const_int 8 [0x8])) [2 MEM[(struct qelem *)elem_4(D)].q_back+0 S8 A64])) insremque.c:48 -1
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 87 [ next ])
            (const_int 0 [0]))) insremque.c:49 -1
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 12)
            (pc))) insremque.c:49 -1
     (int_list:REG_BR_PROB 1500 (nil))
 -> 12)
(note 10 9 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (set (mem/f:DI (plus:DI (reg/v/f:DI 87 [ next ])
                (const_int 8 [0x8])) [2 next_5->q_back+0 S8 A64])
        (reg/v/f:DI 88 [ prev ])) insremque.c:50 -1
     (nil))
(code_label 12 11 13 5 11 "" [1 uses])
(note 13 12 14 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 88 [ prev ])
            (const_int 0 [0]))) insremque.c:51 -1
     (nil))
(jump_insn 15 14 16 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 20)
            (pc))) insremque.c:51 612 {*jcc_1}
     (int_list:REG_BR_PROB 1014 (nil))
 -> 20)
(note 16 15 17 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 20 6 (set (mem/f:DI (reg/v/f:DI 88 [ prev ]) [2 prev_6->q_forw+0 S8 A64])
        (reg/v/f:DI 87 [ next ])) insremque.c:52 -1
     (nil))
(code_label 20 17 21 8 10 "" [1 uses])
(note 21 20 0 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
