
;; Function __nss_rewrite_field (__nss_rewrite_field, funcdef_no=9, decl_uid=1883, cgraph_uid=9, symbol_order=12)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7
Edge 2->7 redirected to 11
Edge 3->7 redirected to 12
Edge 4->7 redirected to 13


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 45.
Merging block 13 into block 12...
Merged blocks 12 and 13.
Merged 12 and 13 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 9 NOTE_INSN_DELETED)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (reg/v/f:DI 97 [ value ])
        (reg:DI 5 di [ value ])) rewrite_field.c:29 -1
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 98 [ to_be_freed ])
        (reg:DI 4 si [ to_be_freed ])) rewrite_field.c:29 -1
     (nil))
(note 4 3 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 4 12 2 (set (mem/f:DI (reg/v/f:DI 98 [ to_be_freed ]) [1 *to_be_freed_6(D)+0 S8 A64])
        (const_int 0 [0])) rewrite_field.c:30 -1
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 97 [ value ])
            (const_int 0 [0]))) rewrite_field.c:31 -1
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 55)
            (pc))) rewrite_field.c:31 612 {*jcc_1}
     (int_list:REG_BR_PROB 1014 (nil))
 -> 55)
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (reg:DI 4 si)
        (symbol_ref:DI ("__nss_invalid_field_characters") [flags 0x42]  <var_decl 0x2b380095a7e0 __nss_invalid_field_characters>)) rewrite_field.c:35 -1
     (nil))
(insn 16 15 17 4 (set (reg:DI 5 di)
        (reg/v/f:DI 97 [ value ])) rewrite_field.c:35 -1
     (nil))
(call_insn/i 17 16 18 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__GI_strpbrk") [flags 0x41]  <function_decl 0x2b380088c1b0 __builtin_strpbrk>) [0 __builtin_strpbrk S1 A8])
            (const_int 0 [0]))) rewrite_field.c:35 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("*__GI_strpbrk") [flags 0x41]  <function_decl 0x2b380088c1b0 __builtin_strpbrk>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 18 17 19 4 (set (reg/v/f:DI 89 [ p ])
        (reg:DI 0 ax)) rewrite_field.c:35 -1
     (nil))
(insn 19 18 20 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 89 [ p ])
            (const_int 0 [0]))) rewrite_field.c:36 -1
     (nil))
(jump_insn 20 19 21 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 59)
            (pc))) rewrite_field.c:36 612 {*jcc_1}
     (int_list:REG_BR_PROB 2164 (nil))
 -> 59)
(note 21 20 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 5 (set (reg:DI 5 di)
        (reg/v/f:DI 97 [ value ])) rewrite_field.c:38 -1
     (nil))
(call_insn 23 22 24 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__GI___strdup") [flags 0x43]  <function_decl 0x2b38009850d8 __strdup>) [0 __strdup S1 A8])
            (const_int 0 [0]))) rewrite_field.c:38 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("*__GI___strdup") [flags 0x43]  <function_decl 0x2b38009850d8 __strdup>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 24 23 25 5 (set (reg/f:DI 99)
        (reg:DI 0 ax)) rewrite_field.c:38 -1
     (expr_list:REG_NOALIAS (reg/f:DI 99)
        (nil)))
(insn 25 24 26 5 (set (reg/f:DI 90 [ D.2598 ])
        (reg/f:DI 99)) rewrite_field.c:38 -1
     (nil))
(insn 26 25 27 5 (set (mem/f:DI (reg/v/f:DI 98 [ to_be_freed ]) [1 *to_be_freed_6(D)+0 S8 A64])
        (reg/f:DI 90 [ D.2598 ])) rewrite_field.c:38 -1
     (nil))
(insn 27 26 28 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 90 [ D.2598 ])
            (const_int 0 [0]))) rewrite_field.c:39 -1
     (nil))
(jump_insn 28 27 29 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 63)
            (pc))) rewrite_field.c:39 612 {*jcc_1}
     (int_list:REG_BR_PROB 192 (nil))
 -> 63)
(note 29 28 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 6 (parallel [
            (set (reg:DI 100 [ D.2599 ])
                (minus:DI (reg/v/f:DI 89 [ p ])
                    (reg/v/f:DI 97 [ value ])))
            (clobber (reg:CC 17 flags))
        ]) rewrite_field.c:43 -1
     (nil))
(insn 31 30 39 6 (parallel [
            (set (reg/v/f:DI 87 [ bad ])
                (plus:DI (reg/f:DI 90 [ D.2598 ])
                    (reg:DI 100 [ D.2599 ])))
            (clobber (reg:CC 17 flags))
        ]) rewrite_field.c:43 -1
     (nil))
(code_label 39 31 32 7 3 "" [1 uses])
(note 32 39 33 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 7 (set (mem:QI (reg/v/f:DI 87 [ bad ]) [0 *bad_1+0 S1 A8])
        (const_int 32 [0x20])) rewrite_field.c:46 -1
     (nil))
(insn 34 33 35 7 (parallel [
            (set (reg/f:DI 95 [ D.2597 ])
                (plus:DI (reg/v/f:DI 87 [ bad ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) rewrite_field.c:47 -1
     (nil))
(insn 35 34 36 7 (set (reg:DI 4 si)
        (symbol_ref:DI ("__nss_invalid_field_characters") [flags 0x42]  <var_decl 0x2b380095a7e0 __nss_invalid_field_characters>)) rewrite_field.c:47 -1
     (nil))
(insn 36 35 37 7 (set (reg:DI 5 di)
        (reg/f:DI 95 [ D.2597 ])) rewrite_field.c:47 -1
     (nil))
(call_insn/i 37 36 38 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__GI_strpbrk") [flags 0x41]  <function_decl 0x2b380088c1b0 __builtin_strpbrk>) [0 __builtin_strpbrk S1 A8])
            (const_int 0 [0]))) rewrite_field.c:47 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("*__GI_strpbrk") [flags 0x41]  <function_decl 0x2b380088c1b0 __builtin_strpbrk>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 38 37 40 7 (set (reg/v/f:DI 87 [ bad ])
        (reg:DI 0 ax)) rewrite_field.c:47 -1
     (nil))
(insn 40 38 41 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 87 [ bad ])
            (const_int 0 [0]))) rewrite_field.c:49 -1
     (nil))
(jump_insn 41 40 51 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 39)
            (pc))) rewrite_field.c:49 -1
     (int_list:REG_BR_PROB 9100 (nil))
 -> 39)
(note 51 41 8 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 8 51 52 8 (set (reg/f:DI 88 [ D.2597 ])
        (reg/f:DI 90 [ D.2598 ])) -1
     (nil))
(jump_insn 52 8 53 8 (set (pc)
        (label_ref 42)) -1
     (nil)
 -> 42)
(barrier 53 52 55)
(code_label 55 53 54 9 4 "" [1 uses])
(note 54 55 5 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 5 54 56 9 (set (reg/f:DI 88 [ D.2597 ])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x2b38009ed5a0 *.LC0>)) rewrite_field.c:32 -1
     (nil))
(jump_insn 56 5 57 9 (set (pc)
        (label_ref 42)) -1
     (nil)
 -> 42)
(barrier 57 56 59)
(code_label 59 57 58 10 5 "" [1 uses])
(note 58 59 6 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 6 58 60 10 (set (reg/f:DI 88 [ D.2597 ])
        (reg/v/f:DI 97 [ value ])) -1
     (nil))
(jump_insn 60 6 61 10 (set (pc)
        (label_ref 42)) -1
     (nil)
 -> 42)
(barrier 61 60 63)
(code_label 63 61 62 11 6 "" [1 uses])
(note 62 63 7 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 7 62 42 11 (set (reg/f:DI 88 [ D.2597 ])
        (const_int 0 [0])) rewrite_field.c:40 -1
     (nil))
(code_label 42 7 43 12 2 "" [3 uses])
(note 43 42 44 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 48 12 (set (reg:DI 96 [ <retval> ])
        (reg/f:DI 88 [ D.2597 ])) -1
     (nil))
(insn 48 44 49 12 (set (reg/i:DI 0 ax)
        (reg:DI 96 [ <retval> ])) rewrite_field.c:52 -1
     (nil))
(insn 49 48 0 12 (use (reg/i:DI 0 ax)) rewrite_field.c:52 -1
     (nil))
