
;; Function __argz_next (__argz_next, funcdef_no=34, decl_uid=7169, cgraph_uid=32, symbol_order=36)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7

;; Generating RTL for gimple basic block 8
Edge 3->8 redirected to 11
Edge 4->8 redirected to 12
Edge 6->8 redirected to 13


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 38.
Merging block 13 into block 12...
Merged blocks 12 and 13.
Merged 12 and 13 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 11 NOTE_INSN_DELETED)
(note 11 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 11 3 2 (set (reg/v/f:DI 92 [ argz ])
        (reg:DI 5 di [ argz ])) argz-next.c:25 -1
     (nil))
(insn 3 2 4 2 (set (reg/v:DI 93 [ argz_len ])
        (reg:DI 4 si [ argz_len ])) argz-next.c:25 -1
     (nil))
(insn 4 3 5 2 (set (reg/v/f:DI 94 [ entry ])
        (reg:DI 1 dx [ entry ])) argz-next.c:25 -1
     (nil))
(note 5 4 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 5 14 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 94 [ entry ])
            (const_int 0 [0]))) argz-next.c:26 -1
     (nil))
(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) argz-next.c:26 -1
     (int_list:REG_BR_PROB 1500 (nil))
 -> 30)
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (parallel [
            (set (reg/f:DI 88 [ D.7213 ])
                (plus:DI (reg/v/f:DI 92 [ argz ])
                    (reg/v:DI 93 [ argz_len ])))
            (clobber (reg:CC 17 flags))
        ]) argz-next.c:28 -1
     (nil))
(insn 17 16 18 4 (set (reg:CC 17 flags)
        (compare:CC (reg/v/f:DI 94 [ entry ])
            (reg/f:DI 88 [ D.7213 ]))) argz-next.c:28 -1
     (nil))
(jump_insn 18 17 19 4 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 47)
            (pc))) argz-next.c:28 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 47)
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg:SI 4 si)
        (const_int 0 [0])) argz-next.c:29 -1
     (nil))
(insn 21 20 22 5 (set (reg:DI 5 di)
        (reg/v/f:DI 94 [ entry ])) argz-next.c:29 -1
     (nil))
(call_insn/i 22 21 23 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__GI___rawmemchr") [flags 0x43]  <function_decl 0x2ad39a0cf360 __rawmemchr>) [0 __rawmemchr S1 A8])
            (const_int 0 [0]))) argz-next.c:29 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("*__GI___rawmemchr") [flags 0x43]  <function_decl 0x2ad39a0cf360 __rawmemchr>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 23 22 24 5 (set (reg/f:DI 89 [ D.7214 ])
        (reg:DI 0 ax)) argz-next.c:29 -1
     (nil))
(insn 24 23 25 5 (parallel [
            (set (reg/v/f:DI 90 [ entry ])
                (plus:DI (reg/f:DI 89 [ D.7214 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) argz-next.c:29 -1
     (nil))
(insn 25 24 26 5 (set (reg:CC 17 flags)
        (compare:CC (reg/f:DI 88 [ D.7213 ])
            (reg/v/f:DI 90 [ entry ]))) argz-next.c:31 -1
     (nil))
(jump_insn 26 25 27 5 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 51)
            (pc))) argz-next.c:31 612 {*jcc_1}
     (int_list:REG_BR_PROB 10000 (nil))
 -> 51)
(note 27 26 9 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 9 27 28 6 (set (reg/f:DI 87 [ D.7212 ])
        (const_int 0 [0])) argz-next.c:31 -1
     (nil))
(jump_insn 28 9 29 6 (set (pc)
        (label_ref 35)) -1
     (nil)
 -> 35)
(barrier 29 28 30)
(code_label 30 29 31 7 2 "" [1 uses])
(note 31 30 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 93 [ argz_len ])
            (const_int 0 [0]))) argz-next.c:34 -1
     (nil))
(jump_insn 33 32 34 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 55)
            (pc))) argz-next.c:34 612 {*jcc_1}
     (int_list:REG_BR_PROB 1000 (nil))
 -> 55)
(note 34 33 7 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 7 34 44 8 (set (reg/f:DI 87 [ D.7212 ])
        (reg/v/f:DI 92 [ argz ])) argz-next.c:35 -1
     (nil))
(jump_insn 44 7 45 8 (set (pc)
        (label_ref 35)) -1
     (nil)
 -> 35)
(barrier 45 44 47)
(code_label 47 45 46 9 4 "" [1 uses])
(note 46 47 6 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 6 46 48 9 (set (reg/f:DI 87 [ D.7212 ])
        (const_int 0 [0])) argz-next.c:31 -1
     (nil))
(jump_insn 48 6 49 9 (set (pc)
        (label_ref 35)) -1
     (nil)
 -> 35)
(barrier 49 48 51)
(code_label 51 49 50 10 5 "" [1 uses])
(note 50 51 8 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 8 50 52 10 (set (reg/f:DI 87 [ D.7212 ])
        (reg/v/f:DI 90 [ entry ])) -1
     (nil))
(jump_insn 52 8 53 10 (set (pc)
        (label_ref 35)) -1
     (nil)
 -> 35)
(barrier 53 52 55)
(code_label 55 53 54 11 6 "" [1 uses])
(note 54 55 10 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 10 54 35 11 (set (reg/f:DI 87 [ D.7212 ])
        (const_int 0 [0])) argz-next.c:31 -1
     (nil))
(code_label 35 10 36 12 3 "" [4 uses])
(note 36 35 37 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 41 12 (set (reg:DI 91 [ <retval> ])
        (reg/f:DI 87 [ D.7212 ])) -1
     (nil))
(insn 41 37 42 12 (set (reg/i:DI 0 ax)
        (reg:DI 91 [ <retval> ])) argz-next.c:38 -1
     (nil))
(insn 42 41 0 12 (use (reg/i:DI 0 ax)) argz-next.c:38 -1
     (nil))
