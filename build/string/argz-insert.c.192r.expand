
;; Function __argz_insert (__argz_insert, funcdef_no=34, decl_uid=7148, cgraph_uid=34, symbol_order=38)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7

;; Generating RTL for gimple basic block 8

;; Generating RTL for gimple basic block 9

;; Generating RTL for gimple basic block 10

;; Generating RTL for gimple basic block 11

;; Generating RTL for gimple basic block 12
Edge 4->12 redirected to 15
Edge 5->12 redirected to 16
Edge 10->12 redirected to 17


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 101.
Merging block 17 into block 16...
Merged blocks 16 and 17.
Merged 16 and 17 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 23 0 33 NOTE_INSN_DELETED)
(note 33 23 24 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 24 33 25 2 (set (reg/v/f:DI 131 [ argz ])
        (reg:DI 5 di [ argz ])) argz-insert.c:32 -1
     (nil))
(insn 25 24 26 2 (set (reg/v/f:DI 132 [ argz_len ])
        (reg:DI 4 si [ argz_len ])) argz-insert.c:32 -1
     (nil))
(insn 26 25 27 2 (set (reg/v/f:DI 133 [ before ])
        (reg:DI 1 dx [ before ])) argz-insert.c:32 -1
     (nil))
(insn 27 26 28 2 (set (reg/v/f:DI 134 [ entry ])
        (reg:DI 2 cx [ entry ])) argz-insert.c:32 -1
     (nil))
(note 28 27 35 2 NOTE_INSN_FUNCTION_BEG)
(insn 35 28 36 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 133 [ before ])
            (const_int 0 [0]))) argz-insert.c:33 -1
     (nil))
(jump_insn 36 35 37 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) argz-insert.c:33 -1
     (int_list:REG_BR_PROB 9559 (nil))
 -> 44)
(note 37 36 38 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 4 (set (reg:DI 1 dx)
        (reg/v/f:DI 134 [ entry ])) argz-insert.c:34 -1
     (nil))
(insn 39 38 40 4 (set (reg:DI 4 si)
        (reg/v/f:DI 132 [ argz_len ])) argz-insert.c:34 -1
     (nil))
(insn 40 39 41 4 (set (reg:DI 5 di)
        (reg/v/f:DI 131 [ argz ])) argz-insert.c:34 -1
     (nil))
(call_insn/j 41 40 42 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__argz_add") [flags 0x41]  <function_decl 0x2b81717bd798 __argz_add>) [0 __argz_add S1 A8])
            (const_int 0 [0]))) argz-insert.c:34 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__argz_add") [flags 0x41]  <function_decl 0x2b81717bd798 __argz_add>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(barrier 42 41 44)
(code_label 44 42 45 5 2 "" [1 uses])
(note 45 44 46 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 5 (set (reg/f:DI 110 [ D.7240 ])
        (mem/f:DI (reg/v/f:DI 131 [ argz ]) [1 *argz_7(D)+0 S8 A64])) argz-insert.c:36 -1
     (nil))
(insn 47 46 48 5 (set (reg:CC 17 flags)
        (compare:CC (reg/v/f:DI 133 [ before ])
            (reg/f:DI 110 [ D.7240 ]))) argz-insert.c:36 -1
     (nil))
(jump_insn 48 47 49 5 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 110)
            (pc))) argz-insert.c:36 612 {*jcc_1}
     (int_list:REG_BR_PROB 6700 (nil))
 -> 110)
(note 49 48 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 6 (set (reg:DI 111 [ D.7241 ])
        (mem:DI (reg/v/f:DI 132 [ argz_len ]) [2 *argz_len_8(D)+0 S8 A64])) argz-insert.c:36 -1
     (nil))
(insn 51 50 52 6 (parallel [
            (set (reg:DI 135 [ D.7240 ])
                (plus:DI (reg/f:DI 110 [ D.7240 ])
                    (reg:DI 111 [ D.7241 ])))
            (clobber (reg:CC 17 flags))
        ]) argz-insert.c:36 -1
     (nil))
(insn 52 51 53 6 (set (reg:CC 17 flags)
        (compare:CC (reg/v/f:DI 133 [ before ])
            (reg:DI 135 [ D.7240 ]))) argz-insert.c:36 -1
     (nil))
(jump_insn 53 52 54 6 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 114)
            (pc))) argz-insert.c:36 612 {*jcc_1}
     (int_list:REG_BR_PROB 6700 (nil))
 -> 114)
(note 54 53 55 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 7 (set (reg:CC 17 flags)
        (compare:CC (reg/v/f:DI 133 [ before ])
            (reg/f:DI 110 [ D.7240 ]))) argz-insert.c:39 -1
     (nil))
(jump_insn 56 55 57 7 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) argz-insert.c:39 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 66)
(note 57 56 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (plus:DI (reg/v/f:DI 133 [ before ])
                    (const_int -1 [0xffffffffffffffff])) [0 MEM[(char *)before_5(D) + -1B]+0 S1 A8])
            (const_int 0 [0]))) argz-insert.c:41 -1
     (nil))
(jump_insn 59 58 60 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) argz-insert.c:41 -1
     (int_list:REG_BR_PROB 900 (nil))
 -> 66)
(note 60 59 63 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(code_label 63 60 61 10 5 "" [1 uses])
(note 61 63 62 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 64 10 (parallel [
            (set (reg/v/f:DI 133 [ before ])
                (plus:DI (reg/v/f:DI 133 [ before ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) argz-insert.c:42 -1
     (nil))
(insn 64 62 65 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (plus:DI (reg/v/f:DI 133 [ before ])
                    (const_int -1 [0xffffffffffffffff])) [0 MEM[base: before_17, offset: -1B]+0 S1 A8])
            (const_int 0 [0]))) argz-insert.c:41 -1
     (nil))
(jump_insn 65 64 66 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 63)
            (pc))) argz-insert.c:41 -1
     (int_list:REG_BR_PROB 9100 (nil))
 -> 63)
(code_label 66 65 67 11 4 "" [2 uses])
(note 67 66 68 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 11 (set (reg:DI 5 di)
        (reg/v/f:DI 134 [ entry ])) argz-insert.c:46 -1
     (nil))
(call_insn/i 69 68 70 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__GI_strlen") [flags 0x43]  <function_decl 0x2b8171394948 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) argz-insert.c:46 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("*__GI_strlen") [flags 0x43]  <function_decl 0x2b8171394948 strlen>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 70 69 71 11 (set (reg:DI 137)
        (reg:DI 0 ax)) argz-insert.c:46 -1
     (nil))
(insn 71 70 72 11 (set (reg:DI 138)
        (reg:DI 137)) argz-insert.c:46 -1
     (nil))
(insn 72 71 73 11 (set (reg:DI 119 [ D.7241 ])
        (reg:DI 138)) argz-insert.c:46 -1
     (nil))
(insn 73 72 74 11 (parallel [
            (set (reg/v:DI 120 [ entry_len ])
                (plus:DI (reg:DI 119 [ D.7241 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) argz-insert.c:46 -1
     (nil))
(insn 74 73 75 11 (parallel [
            (set (reg/v:DI 121 [ new_argz_len ])
                (plus:DI (reg:DI 111 [ D.7241 ])
                    (reg/v:DI 120 [ entry_len ])))
            (clobber (reg:CC 17 flags))
        ]) argz-insert.c:47 -1
     (nil))
(insn 75 74 76 11 (set (reg:DI 4 si)
        (reg/v:DI 121 [ new_argz_len ])) argz-insert.c:48 -1
     (nil))
(insn 76 75 77 11 (set (reg:DI 5 di)
        (reg/f:DI 110 [ D.7240 ])) argz-insert.c:48 -1
     (nil))
(call_insn 77 76 78 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x2b81713be000 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) argz-insert.c:48 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x2b81713be000 realloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 78 77 79 11 (set (reg/v/f:DI 122 [ new_argz ])
        (reg:DI 0 ax)) argz-insert.c:48 -1
     (nil))
(insn 79 78 80 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 122 [ new_argz ])
            (const_int 0 [0]))) argz-insert.c:50 -1
     (nil))
(jump_insn 80 79 81 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 118)
            (pc))) argz-insert.c:50 612 {*jcc_1}
     (int_list:REG_BR_PROB 4673 (nil))
 -> 118)
(note 81 80 82 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 12 (set (reg:DI 114 [ D.7243 ])
        (reg/v/f:DI 133 [ before ])) argz-insert.c:45 -1
     (nil))
(insn 83 82 84 12 (parallel [
            (set (reg:DI 139 [ D.7243 ])
                (minus:DI (reg:DI 114 [ D.7243 ])
                    (mem/f:DI (reg/v/f:DI 131 [ argz ]) [1 *argz_7(D)+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) argz-insert.c:52 -1
     (nil))
(insn 84 83 85 12 (parallel [
            (set (reg/v/f:DI 127 [ before ])
                (plus:DI (reg/v/f:DI 122 [ new_argz ])
                    (reg:DI 139 [ D.7243 ])))
            (clobber (reg:CC 17 flags))
        ]) argz-insert.c:52 -1
     (nil))
(insn 85 84 86 12 (parallel [
            (set (reg:DI 140 [ D.7243 ])
                (minus:DI (reg:DI 114 [ D.7243 ])
                    (reg/f:DI 110 [ D.7240 ])))
            (clobber (reg:CC 17 flags))
        ]) argz-insert.c:53 -1
     (nil))
(insn 86 85 87 12 (parallel [
            (set (reg:DI 141 [ after_before ])
                (minus:DI (reg:DI 111 [ D.7241 ])
                    (reg:DI 140 [ D.7243 ])))
            (clobber (reg:CC 17 flags))
        ]) argz-insert.c:53 -1
     (nil))
(insn 87 86 88 12 (parallel [
            (set (reg:DI 142 [ D.7245 ])
                (plus:DI (reg/v/f:DI 127 [ before ])
                    (reg/v:DI 120 [ entry_len ])))
            (clobber (reg:CC 17 flags))
        ]) argz-insert.c:53 -1
     (nil))
(insn 88 87 89 12 (set (reg:DI 1 dx)
        (reg:DI 141 [ after_before ])) argz-insert.c:53 -1
     (nil))
(insn 89 88 90 12 (set (reg:DI 4 si)
        (reg/v/f:DI 127 [ before ])) argz-insert.c:53 -1
     (nil))
(insn 90 89 91 12 (set (reg:DI 5 di)
        (reg:DI 142 [ D.7245 ])) argz-insert.c:53 -1
     (nil))
(call_insn 91 90 92 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__GI_memmove") [flags 0x43]  <function_decl 0x2b81713910d8 memmove>) [0 __builtin_memmove S1 A8])
            (const_int 0 [0]))) argz-insert.c:53 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("*__GI_memmove") [flags 0x43]  <function_decl 0x2b81713910d8 memmove>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 92 91 93 12 (set (reg:DI 1 dx)
        (reg/v:DI 120 [ entry_len ])) argz-insert.c:54 -1
     (nil))
(insn 93 92 94 12 (set (reg:DI 4 si)
        (reg/v/f:DI 134 [ entry ])) argz-insert.c:54 -1
     (nil))
(insn 94 93 95 12 (set (reg:DI 5 di)
        (reg/v/f:DI 127 [ before ])) argz-insert.c:54 -1
     (nil))
(call_insn 95 94 96 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__GI_memmove") [flags 0x43]  <function_decl 0x2b81713910d8 memmove>) [0 __builtin_memmove S1 A8])
            (const_int 0 [0]))) argz-insert.c:54 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("*__GI_memmove") [flags 0x43]  <function_decl 0x2b81713910d8 memmove>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 96 95 97 12 (set (mem/f:DI (reg/v/f:DI 131 [ argz ]) [1 *argz_7(D)+0 S8 A64])
        (reg/v/f:DI 122 [ new_argz ])) argz-insert.c:55 -1
     (nil))
(insn 97 96 30 12 (set (mem:DI (reg/v/f:DI 132 [ argz_len ]) [2 *argz_len_8(D)+0 S8 A64])
        (reg/v:DI 121 [ new_argz_len ])) argz-insert.c:56 -1
     (nil))
(insn 30 97 107 12 (set (reg:SI 109 [ D.7239 ])
        (const_int 0 [0])) argz-insert.c:57 -1
     (nil))
(jump_insn 107 30 108 12 (set (pc)
        (label_ref 98)) argz-insert.c:57 -1
     (nil)
 -> 98)
(barrier 108 107 110)
(code_label 110 108 109 13 6 "" [1 uses])
(note 109 110 32 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 32 109 111 13 (set (reg:SI 109 [ D.7239 ])
        (const_int 22 [0x16])) argz-insert.c:37 -1
     (nil))
(jump_insn 111 32 112 13 (set (pc)
        (label_ref 98)) -1
     (nil)
 -> 98)
(barrier 112 111 114)
(code_label 114 112 113 14 7 "" [1 uses])
(note 113 114 29 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 29 113 115 14 (set (reg:SI 109 [ D.7239 ])
        (const_int 22 [0x16])) argz-insert.c:37 -1
     (nil))
(jump_insn 115 29 116 14 (set (pc)
        (label_ref 98)) -1
     (nil)
 -> 98)
(barrier 116 115 118)
(code_label 118 116 117 15 8 "" [1 uses])
(note 117 118 31 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 31 117 98 15 (set (reg:SI 109 [ D.7239 ])
        (const_int 12 [0xc])) argz-insert.c:60 -1
     (nil))
(code_label 98 31 99 16 3 "" [3 uses])
(note 99 98 100 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 104 16 (set (reg:SI 130 [ <retval> ])
        (reg:SI 109 [ D.7239 ])) -1
     (nil))
(insn 104 100 105 16 (set (reg/i:SI 0 ax)
        (reg:SI 130 [ <retval> ])) argz-insert.c:62 -1
     (nil))
(insn 105 104 0 16 (use (reg/i:SI 0 ax)) argz-insert.c:62 -1
     (nil))
