
;; Function __argz_add_sep (__argz_add_sep, funcdef_no=34, decl_uid=7130, cgraph_uid=34, symbol_order=38)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7

;; Generating RTL for gimple basic block 8

;; Generating RTL for gimple basic block 9

;; Generating RTL for gimple basic block 10

;; Generating RTL for gimple basic block 11

;; Generating RTL for gimple basic block 12

;; Generating RTL for gimple basic block 13
Edge 2->13 redirected to 16
Edge 3->13 redirected to 17


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 95.
Merging block 17 into block 16...
Merged blocks 16 and 17.
Merged 16 and 17 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 23 0 34 NOTE_INSN_DELETED)
(note 34 23 24 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 24 34 25 2 (set (reg/v/f:DI 127 [ argz ])
        (reg:DI 5 di [ argz ])) argz-addsep.c:27 -1
     (nil))
(insn 25 24 26 2 (set (reg/v/f:DI 128 [ argz_len ])
        (reg:DI 4 si [ argz_len ])) argz-addsep.c:27 -1
     (nil))
(insn 26 25 27 2 (set (reg/v/f:DI 129 [ string ])
        (reg:DI 1 dx [ string ])) argz-addsep.c:27 -1
     (nil))
(insn 27 26 28 2 (set (reg/v:SI 130 [ delim ])
        (reg:SI 2 cx [ delim ])) argz-addsep.c:27 -1
     (nil))
(note 28 27 36 2 NOTE_INSN_FUNCTION_BEG)
(insn 36 28 37 2 (set (reg:DI 5 di)
        (reg/v/f:DI 129 [ string ])) argz-addsep.c:28 -1
     (nil))
(call_insn/i 37 36 38 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__GI_strlen") [flags 0x43]  <function_decl 0x2ae661fa0948 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) argz-addsep.c:28 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("*__GI_strlen") [flags 0x43]  <function_decl 0x2ae661fa0948 strlen>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 38 37 39 2 (set (reg:DI 132)
        (reg:DI 0 ax)) argz-addsep.c:28 -1
     (nil))
(insn 39 38 40 2 (set (reg:DI 133)
        (reg:DI 132)) argz-addsep.c:28 -1
     (nil))
(insn 40 39 41 2 (set (reg:DI 112 [ D.7239 ])
        (reg:DI 133)) argz-addsep.c:28 -1
     (nil))
(insn 41 40 42 2 (parallel [
            (set (reg/v:DI 109 [ nlen ])
                (plus:DI (reg:DI 112 [ D.7239 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) argz-addsep.c:28 -1
     (nil))
(insn 42 41 43 2 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 109 [ nlen ])
            (const_int 1 [0x1]))) argz-addsep.c:30 -1
     (nil))
(jump_insn 43 42 44 2 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 104)
            (pc))) argz-addsep.c:30 612 {*jcc_1}
     (int_list:REG_BR_PROB 3666 (nil))
 -> 104)
(note 44 43 45 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 4 (set (reg:DI 135)
        (mem:DI (reg/v/f:DI 128 [ argz_len ]) [2 *argz_len_14(D)+0 S8 A64])) argz-addsep.c:35 -1
     (nil))
(insn 46 45 47 4 (parallel [
            (set (reg:DI 134 [ D.7239 ])
                (plus:DI (reg/v:DI 109 [ nlen ])
                    (reg:DI 135)))
            (clobber (reg:CC 17 flags))
        ]) argz-addsep.c:35 -1
     (expr_list:REG_EQUAL (plus:DI (reg/v:DI 109 [ nlen ])
            (mem:DI (reg/v/f:DI 128 [ argz_len ]) [2 *argz_len_14(D)+0 S8 A64]))
        (nil)))
(insn 47 46 48 4 (set (reg:DI 4 si)
        (reg:DI 134 [ D.7239 ])) argz-addsep.c:35 -1
     (nil))
(insn 48 47 49 4 (set (reg:DI 5 di)
        (mem/f:DI (reg/v/f:DI 127 [ argz ]) [1 *argz_17(D)+0 S8 A64])) argz-addsep.c:35 -1
     (nil))
(call_insn 49 48 50 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x2ae661fca000 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) argz-addsep.c:35 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x2ae661fca000 realloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 50 49 51 4 (set (reg/f:DI 116 [ D.7241 ])
        (reg:DI 0 ax)) argz-addsep.c:35 -1
     (nil))
(insn 51 50 52 4 (set (mem/f:DI (reg/v/f:DI 127 [ argz ]) [1 *argz_17(D)+0 S8 A64])
        (reg/f:DI 116 [ D.7241 ])) argz-addsep.c:35 -1
     (nil))
(insn 52 51 53 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 116 [ D.7241 ])
            (const_int 0 [0]))) argz-addsep.c:36 -1
     (nil))
(jump_insn 53 52 54 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 108)
            (pc))) argz-addsep.c:36 612 {*jcc_1}
     (int_list:REG_BR_PROB 2638 (nil))
 -> 108)
(note 54 53 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 5 (set (reg:DI 136)
        (mem:DI (reg/v/f:DI 128 [ argz_len ]) [2 *argz_len_14(D)+0 S8 A64])) argz-addsep.c:39 -1
     (nil))
(insn 56 55 87 5 (parallel [
            (set (reg/v/f:DI 110 [ wp ])
                (plus:DI (reg/f:DI 116 [ D.7241 ])
                    (reg:DI 136)))
            (clobber (reg:CC 17 flags))
        ]) argz-addsep.c:39 -1
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 116 [ D.7241 ])
            (mem:DI (reg/v/f:DI 128 [ argz_len ]) [2 *argz_len_14(D)+0 S8 A64]))
        (nil)))
(code_label 87 56 57 6 6 "" [1 uses])
(note 57 87 58 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 6 (set (reg:QI 125 [ D.7243 ])
        (mem:QI (reg/v/f:DI 129 [ string ]) [0 MEM[base: string_3, offset: 0B]+0 S1 A8])) argz-addsep.c:42 -1
     (nil))
(insn 59 58 60 6 (set (reg:SI 137 [ D.7242 ])
        (sign_extend:SI (reg:QI 125 [ D.7243 ]))) argz-addsep.c:42 -1
     (nil))
(insn 60 59 61 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 137 [ D.7242 ])
            (reg/v:SI 130 [ delim ]))) argz-addsep.c:42 -1
     (nil))
(jump_insn 61 60 62 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) argz-addsep.c:42 -1
     (int_list:REG_BR_PROB 7200 (nil))
 -> 79)
(note 62 61 63 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 7 (set (reg:CC 17 flags)
        (compare:CC (reg/v/f:DI 110 [ wp ])
            (mem/f:DI (reg/v/f:DI 127 [ argz ]) [1 *argz_17(D)+0 S8 A64]))) argz-addsep.c:44 -1
     (nil))
(jump_insn 64 63 65 7 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) argz-addsep.c:44 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 74)
(note 65 64 66 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (plus:DI (reg/v/f:DI 110 [ wp ])
                    (const_int -1 [0xffffffffffffffff])) [0 MEM[(char *)wp_4 + -1B]+0 S1 A8])
            (const_int 0 [0]))) argz-addsep.c:44 -1
     (nil))
(jump_insn 67 66 68 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) argz-addsep.c:44 -1
     (int_list:REG_BR_PROB 5000 (nil))
 -> 74)
(note 68 67 69 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 9 (parallel [
            (set (reg/v/f:DI 121 [ wp ])
                (plus:DI (reg/v/f:DI 110 [ wp ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) argz-addsep.c:45 -1
     (nil))
(insn 70 69 71 9 (set (mem:QI (reg/v/f:DI 110 [ wp ]) [0 *wp_4+0 S1 A8])
        (const_int 0 [0])) argz-addsep.c:45 -1
     (nil))
(insn 71 70 30 9 (set (reg:QI 125 [ D.7243 ])
        (mem:QI (reg/v/f:DI 129 [ string ]) [0 MEM[base: string_3, offset: 0B]+0 S1 A8])) -1
     (nil))
(insn 30 71 72 9 (set (reg/v/f:DI 110 [ wp ])
        (reg/v/f:DI 121 [ wp ])) argz-addsep.c:45 -1
     (nil))
(jump_insn 72 30 73 9 (set (pc)
        (label_ref 84)) argz-addsep.c:45 -1
     (nil)
 -> 84)
(barrier 73 72 74)
(code_label 74 73 75 10 4 "" [2 uses])
(note 75 74 76 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 10 (parallel [
            (set (reg/v:DI 109 [ nlen ])
                (plus:DI (reg/v:DI 109 [ nlen ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) argz-addsep.c:47 -1
     (nil))
(jump_insn 77 76 78 10 (set (pc)
        (label_ref 84)) argz-addsep.c:47 -1
     (nil)
 -> 84)
(barrier 78 77 79)
(code_label 79 78 80 11 3 "" [1 uses])
(note 80 79 81 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 11 (parallel [
            (set (reg/v/f:DI 122 [ wp ])
                (plus:DI (reg/v/f:DI 110 [ wp ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) argz-addsep.c:50 -1
     (nil))
(insn 82 81 83 11 (set (mem:QI (reg/v/f:DI 110 [ wp ]) [0 *wp_4+0 S1 A8])
        (reg:QI 125 [ D.7243 ])) argz-addsep.c:50 -1
     (nil))
(insn 83 82 29 11 (set (reg:QI 125 [ D.7243 ])
        (mem:QI (reg/v/f:DI 129 [ string ]) [0 MEM[base: string_3, offset: 0B]+0 S1 A8])) -1
     (nil))
(insn 29 83 84 11 (set (reg/v/f:DI 110 [ wp ])
        (reg/v/f:DI 122 [ wp ])) argz-addsep.c:50 -1
     (nil))
(code_label 84 29 85 12 5 "" [2 uses])
(note 85 84 86 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 88 12 (parallel [
            (set (reg/v/f:DI 129 [ string ])
                (plus:DI (reg/v/f:DI 129 [ string ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) argz-addsep.c:51 -1
     (nil))
(insn 88 86 89 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 125 [ D.7243 ])
            (const_int 0 [0]))) argz-addsep.c:51 -1
     (nil))
(jump_insn 89 88 90 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 87)
            (pc))) argz-addsep.c:51 -1
     (int_list:REG_BR_PROB 9100 (nil))
 -> 87)
(note 90 89 91 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 32 13 (parallel [
            (set (mem:DI (reg/v/f:DI 128 [ argz_len ]) [2 *argz_len_14(D)+0 S8 A64])
                (plus:DI (mem:DI (reg/v/f:DI 128 [ argz_len ]) [2 *argz_len_14(D)+0 S8 A64])
                    (reg/v:DI 109 [ nlen ])))
            (clobber (reg:CC 17 flags))
        ]) argz-addsep.c:53 -1
     (nil))
(insn 32 91 101 13 (set (reg:SI 111 [ D.7238 ])
        (const_int 0 [0])) argz-addsep.c:56 -1
     (nil))
(jump_insn 101 32 102 13 (set (pc)
        (label_ref 92)) -1
     (nil)
 -> 92)
(barrier 102 101 104)
(code_label 104 102 103 14 7 "" [1 uses])
(note 103 104 33 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 33 103 105 14 (set (reg:SI 111 [ D.7238 ])
        (const_int 0 [0])) argz-addsep.c:56 -1
     (nil))
(jump_insn 105 33 106 14 (set (pc)
        (label_ref 92)) -1
     (nil)
 -> 92)
(barrier 106 105 108)
(code_label 108 106 107 15 8 "" [1 uses])
(note 107 108 31 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 31 107 92 15 (set (reg:SI 111 [ D.7238 ])
        (const_int 12 [0xc])) argz-addsep.c:37 -1
     (nil))
(code_label 92 31 93 16 2 "" [2 uses])
(note 93 92 94 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 98 16 (set (reg:SI 126 [ <retval> ])
        (reg:SI 111 [ D.7238 ])) -1
     (nil))
(insn 98 94 99 16 (set (reg/i:SI 0 ax)
        (reg:SI 126 [ <retval> ])) argz-addsep.c:57 -1
     (nil))
(insn 99 98 0 16 (use (reg/i:SI 0 ax)) argz-addsep.c:57 -1
     (nil))
