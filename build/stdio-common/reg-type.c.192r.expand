
;; Function __register_printf_type (__register_printf_type, funcdef_no=33, decl_uid=7329, cgraph_uid=33, symbol_order=38)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7
Edge 4->7 redirected to 12


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Forwarding edge 4->5 to 9 failed.
Forwarding edge 6->7 to 4 failed.
Removing jump 55.
Merging block 12 into block 11...
Merged blocks 11 and 12.
Merged 11 and 12 without moving.


try_optimize_cfg iteration 2

Forwarding edge 4->5 to 9 failed.
Forwarding edge 6->7 to 4 failed.


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg/v/f:DI 101 [ fct ])
        (reg:DI 5 di [ fct ])) reg-type.c:36 -1
     (nil))
(note 3 2 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 3 9 2 (set (reg:SI 105)
        (const_int 1 [0x1])) reg-type.c:38 -1
     (nil))
(insn 9 8 10 2 (set (reg:SI 106)
        (const_int 0 [0])) reg-type.c:38 -1
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg:SI 102 [ ignore1 ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=S") 0 [
                        (reg:SI 105)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2af958f58480 lock>) [2 lock+0 S4 A32])
                        (reg:SI 106)
                    ]
                     [
                        (asm_input:SI ("0") reg-type.c:38)
                        (asm_input:SI ("m") reg-type.c:38)
                        (asm_input:SI ("3") reg-type.c:38)
                    ]
                     [] reg-type.c:38))
            (set (reg:SI 103 [ ignore2 ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=&D") 1 [
                        (reg:SI 105)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2af958f58480 lock>) [2 lock+0 S4 A32])
                        (reg:SI 106)
                    ]
                     [
                        (asm_input:SI ("0") reg-type.c:38)
                        (asm_input:SI ("m") reg-type.c:38)
                        (asm_input:SI ("3") reg-type.c:38)
                    ]
                     [] reg-type.c:38))
            (set (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2af958f58480 lock>) [2 lock+0 S4 A32])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=m") 2 [
                        (reg:SI 105)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2af958f58480 lock>) [2 lock+0 S4 A32])
                        (reg:SI 106)
                    ]
                     [
                        (asm_input:SI ("0") reg-type.c:38)
                        (asm_input:SI ("m") reg-type.c:38)
                        (asm_input:SI ("3") reg-type.c:38)
                    ]
                     [] reg-type.c:38))
            (set (reg:SI 104 [ ignore3 ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=a") 3 [
                        (reg:SI 105)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2af958f58480 lock>) [2 lock+0 S4 A32])
                        (reg:SI 106)
                    ]
                     [
                        (asm_input:SI ("0") reg-type.c:38)
                        (asm_input:SI ("m") reg-type.c:38)
                        (asm_input:SI ("3") reg-type.c:38)
                    ]
                     [] reg-type.c:38))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
            (clobber (reg:QI 40 r11))
            (clobber (reg:QI 2 cx))
        ]) reg-type.c:38 -1
     (nil))
(insn 11 10 12 2 (set (reg/v:SI 88 [ ignore1 ])
        (reg:SI 102 [ ignore1 ])) reg-type.c:38 -1
     (nil))
(insn 12 11 13 2 (set (reg/v:SI 89 [ ignore2 ])
        (reg:SI 103 [ ignore2 ])) reg-type.c:38 -1
     (nil))
(insn 13 12 14 2 (set (reg/v:SI 90 [ ignore3 ])
        (reg:SI 104 [ ignore3 ])) reg-type.c:38 -1
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (symbol_ref:DI ("__printf_va_arg_table") [flags 0x2]  <var_decl 0x2af958f583f0 __printf_va_arg_table>) [1 __printf_va_arg_table+0 S8 A64])
            (const_int 0 [0]))) reg-type.c:40 -1
     (nil))
(jump_insn 15 14 33 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) reg-type.c:40 -1
     (int_list:REG_BR_PROB 672 (nil))
 -> 23)
(code_label 33 15 16 4 6 "" [1 uses])
(note 16 33 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg/v:SI 87 [ result ])
        (mem/c:SI (symbol_ref:DI ("pa_next_type") [flags 0x2]  <var_decl 0x2af958f58510 pa_next_type>) [2 pa_next_type+0 S4 A32])) reg-type.c:48 -1
     (nil))
(insn 18 17 19 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 87 [ result ])
            (const_int 256 [0x100]))) reg-type.c:48 -1
     (nil))
(jump_insn 19 18 22 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) reg-type.c:48 -1
     (int_list:REG_BR_PROB 159 (nil))
 -> 37)
(note 22 19 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 20 22 21 5 (set (pc)
        (label_ref 43)) -1
     (nil)
 -> 43)
(barrier 21 20 23)
(code_label 23 21 24 6 2 "" [1 uses])
(note 24 23 25 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 6 (set (reg:DI 4 si)
        (const_int 8 [0x8])) reg-type.c:43 -1
     (nil))
(insn 26 25 27 6 (set (reg:DI 5 di)
        (const_int 248 [0xf8])) reg-type.c:43 -1
     (nil))
(call_insn 27 26 28 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("calloc") [flags 0x41]  <function_decl 0x2af958b6d000 calloc>) [0 __builtin_calloc S1 A8])
            (const_int 0 [0]))) reg-type.c:43 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("calloc") [flags 0x41]  <function_decl 0x2af958b6d000 calloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 28 27 29 6 (set (reg/f:DI 107)
        (reg:DI 0 ax)) reg-type.c:43 -1
     (expr_list:REG_NOALIAS (reg/f:DI 107)
        (nil)))
(insn 29 28 30 6 (set (reg/f:DI 92 [ D.7371 ])
        (reg/f:DI 107)) reg-type.c:43 -1
     (nil))
(insn 30 29 31 6 (set (mem/f/c:DI (symbol_ref:DI ("__printf_va_arg_table") [flags 0x2]  <var_decl 0x2af958f583f0 __printf_va_arg_table>) [1 __printf_va_arg_table+0 S8 A64])
        (reg/f:DI 92 [ D.7371 ])) reg-type.c:42 -1
     (nil))
(insn 31 30 32 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 92 [ D.7371 ])
            (const_int 0 [0]))) reg-type.c:44 -1
     (nil))
(jump_insn 32 31 36 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 64)
            (pc))) reg-type.c:44 612 {*jcc_1}
     (int_list:REG_BR_PROB 73 (nil))
 -> 64)
(note 36 32 34 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 34 36 35 7 (set (pc)
        (label_ref 33)) -1
     (nil)
 -> 33)
(barrier 35 34 37)
(code_label 37 35 38 8 3 "" [1 uses])
(note 38 37 39 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 8 (set (reg:DI 108)
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("__libc_errno") [flags 0x60]  <var_decl 0x2af958ef8630 __libc_errno>)
                    ] UNSPEC_GOTNTPOFF)) [3  S8 A8])) reg-type.c:49 -1
     (nil))
(insn 40 39 4 8 (set (mem/c:SI (plus:DI (unspec:DI [
                        (const_int 0 [0])
                    ] UNSPEC_TP)
                (reg:DI 108)) [2 __libc_errno+0 S4 A32])
        (const_int 28 [0x1c])) reg-type.c:49 -1
     (nil))
(insn 4 40 41 8 (set (reg/v:SI 87 [ result ])
        (const_int -1 [0xffffffffffffffff])) reg-type.c:37 -1
     (nil))
(jump_insn 41 4 42 8 (set (pc)
        (label_ref 50)) -1
     (nil)
 -> 50)
(barrier 42 41 43)
(code_label 43 42 44 9 4 "" [1 uses])
(note 44 43 45 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 9 (parallel [
            (set (reg:SI 109)
                (plus:SI (reg/v:SI 87 [ result ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) reg-type.c:52 -1
     (nil))
(insn 46 45 47 9 (set (mem/c:SI (symbol_ref:DI ("pa_next_type") [flags 0x2]  <var_decl 0x2af958f58510 pa_next_type>) [2 pa_next_type+0 S4 A32])
        (reg:SI 109)) reg-type.c:52 -1
     (nil))
(insn 47 46 48 9 (set (reg:DI 110 [ D.7373 ])
        (sign_extend:DI (reg/v:SI 87 [ result ]))) reg-type.c:53 -1
     (nil))
(insn 48 47 49 9 (set (reg/f:DI 111)
        (mem/f/c:DI (symbol_ref:DI ("__printf_va_arg_table") [flags 0x2]  <var_decl 0x2af958f583f0 __printf_va_arg_table>) [1 __printf_va_arg_table+0 S8 A64])) reg-type.c:53 -1
     (nil))
(insn 49 48 61 9 (set (mem/f:DI (plus:DI (plus:DI (mult:DI (reg:DI 110 [ D.7373 ])
                        (const_int 8 [0x8]))
                    (reg/f:DI 111))
                (const_int -64 [0xffffffffffffffc0])) [1 *_21+0 S8 A64])
        (reg/v/f:DI 101 [ fct ])) reg-type.c:53 -1
     (nil))
(jump_insn 61 49 62 9 (set (pc)
        (label_ref 50)) -1
     (nil)
 -> 50)
(barrier 62 61 64)
(code_label 64 62 63 10 7 "" [1 uses])
(note 63 64 5 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 5 63 50 10 (set (reg/v:SI 87 [ result ])
        (const_int -1 [0xffffffffffffffff])) reg-type.c:37 -1
     (nil))
(code_label 50 5 51 11 5 ("out") [2 uses])
(note 51 50 52 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 11 (parallel [
            (set (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2af958f58480 lock>) [2 lock+0 S4 A32])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; decl %0
	jne 1f
	jmp 24f
	0:	decl %0
	je 24f
	1:	lea %0, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_unlock_wake_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=m") 0 [
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2af958f58480 lock>) [2 lock+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("m") reg-type.c:57)
                    ]
                     [] reg-type.c:57))
            (set (reg:SI 112 [ ignore ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; decl %0
	jne 1f
	jmp 24f
	0:	decl %0
	je 24f
	1:	lea %0, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_unlock_wake_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=&D") 1 [
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2af958f58480 lock>) [2 lock+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("m") reg-type.c:57)
                    ]
                     [] reg-type.c:57))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
            (clobber (reg:QI 40 r11))
            (clobber (reg:QI 2 cx))
            (clobber (reg:QI 0 ax))
        ]) reg-type.c:57 -1
     (nil))
(insn 53 52 54 11 (set (reg/v:SI 99 [ ignore ])
        (reg:SI 112 [ ignore ])) reg-type.c:57 -1
     (nil))
(insn 54 53 58 11 (set (reg:SI 100 [ <retval> ])
        (reg/v:SI 87 [ result ])) reg-type.c:59 -1
     (nil))
(insn 58 54 59 11 (set (reg/i:SI 0 ax)
        (reg:SI 100 [ <retval> ])) reg-type.c:60 -1
     (nil))
(insn 59 58 0 11 (use (reg/i:SI 0 ax)) reg-type.c:60 -1
     (nil))
