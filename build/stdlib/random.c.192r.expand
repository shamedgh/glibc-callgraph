
;; Function __srandom (__srandom, funcdef_no=33, decl_uid=4857, cgraph_uid=33, symbol_order=39)


;; Generating RTL for gimple basic block 2


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v:SI 91 [ x ])
        (reg:SI 5 di [ x ])) random.c:209 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 95)
        (const_int 1 [0x1])) random.c:210 -1
     (nil))
(insn 7 6 8 2 (set (reg:SI 96)
        (const_int 0 [0])) random.c:210 -1
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg:SI 92 [ ignore1 ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=S") 0 [
                        (reg:SI 95)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                        (reg:SI 96)
                    ]
                     [
                        (asm_input:SI ("0") random.c:210)
                        (asm_input:SI ("m") random.c:210)
                        (asm_input:SI ("3") random.c:210)
                    ]
                     [] random.c:210))
            (set (reg:SI 93 [ ignore2 ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=&D") 1 [
                        (reg:SI 95)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                        (reg:SI 96)
                    ]
                     [
                        (asm_input:SI ("0") random.c:210)
                        (asm_input:SI ("m") random.c:210)
                        (asm_input:SI ("3") random.c:210)
                    ]
                     [] random.c:210))
            (set (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=m") 2 [
                        (reg:SI 95)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                        (reg:SI 96)
                    ]
                     [
                        (asm_input:SI ("0") random.c:210)
                        (asm_input:SI ("m") random.c:210)
                        (asm_input:SI ("3") random.c:210)
                    ]
                     [] random.c:210))
            (set (reg:SI 94 [ ignore3 ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=a") 3 [
                        (reg:SI 95)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                        (reg:SI 96)
                    ]
                     [
                        (asm_input:SI ("0") random.c:210)
                        (asm_input:SI ("m") random.c:210)
                        (asm_input:SI ("3") random.c:210)
                    ]
                     [] random.c:210))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
            (clobber (reg:QI 40 r11))
            (clobber (reg:QI 2 cx))
        ]) random.c:210 -1
     (nil))
(insn 9 8 10 2 (set (reg/v:SI 87 [ ignore1 ])
        (reg:SI 92 [ ignore1 ])) random.c:210 -1
     (nil))
(insn 10 9 11 2 (set (reg/v:SI 88 [ ignore2 ])
        (reg:SI 93 [ ignore2 ])) random.c:210 -1
     (nil))
(insn 11 10 12 2 (set (reg/v:SI 89 [ ignore3 ])
        (reg:SI 94 [ ignore3 ])) random.c:210 -1
     (nil))
(insn 12 11 13 2 (set (reg:DI 4 si)
        (symbol_ref:DI ("unsafe_state") [flags 0x2]  <var_decl 0x2b9c185d5f30 unsafe_state>)) random.c:211 -1
     (nil))
(insn 13 12 14 2 (set (reg:SI 5 di)
        (reg/v:SI 91 [ x ])) random.c:211 -1
     (nil))
(call_insn 14 13 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__srandom_r") [flags 0x41]  <function_decl 0x2b9c1849b948 __srandom_r>) [0 __srandom_r S1 A8])
            (const_int 0 [0]))) random.c:211 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__srandom_r") [flags 0x41]  <function_decl 0x2b9c1849b948 __srandom_r>)
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 15 14 16 2 (parallel [
            (set (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; decl %0
	jne 1f
	jmp 24f
	0:	decl %0
	je 24f
	1:	lea %0, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_unlock_wake_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=m") 0 [
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("m") random.c:212)
                    ]
                     [] random.c:212))
            (set (reg:SI 97 [ ignore ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; decl %0
	jne 1f
	jmp 24f
	0:	decl %0
	je 24f
	1:	lea %0, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_unlock_wake_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=&D") 1 [
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("m") random.c:212)
                    ]
                     [] random.c:212))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
            (clobber (reg:QI 40 r11))
            (clobber (reg:QI 2 cx))
            (clobber (reg:QI 0 ax))
        ]) random.c:212 -1
     (nil))
(insn 16 15 0 2 (set (reg/v:SI 90 [ ignore ])
        (reg:SI 97 [ ignore ])) random.c:212 -1
     (nil))

;; Function __initstate (__initstate, funcdef_no=34, decl_uid=4861, cgraph_uid=36, symbol_order=42)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4
Edge 2->4 redirected to 7


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 33.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 8 NOTE_INSN_DELETED)
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v:SI 96 [ seed ])
        (reg:SI 5 di [ seed ])) random.c:231 -1
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 97 [ arg_state ])
        (reg:DI 4 si [ arg_state ])) random.c:231 -1
     (nil))
(insn 4 3 5 2 (set (reg/v:DI 98 [ n ])
        (reg:DI 1 dx [ n ])) random.c:231 -1
     (nil))
(note 5 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 5 11 2 (set (reg:SI 102)
        (const_int 1 [0x1])) random.c:235 -1
     (nil))
(insn 11 10 12 2 (set (reg:SI 103)
        (const_int 0 [0])) random.c:235 -1
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 99 [ ignore1 ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=S") 0 [
                        (reg:SI 102)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                        (reg:SI 103)
                    ]
                     [
                        (asm_input:SI ("0") random.c:235)
                        (asm_input:SI ("m") random.c:235)
                        (asm_input:SI ("3") random.c:235)
                    ]
                     [] random.c:235))
            (set (reg:SI 100 [ ignore2 ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=&D") 1 [
                        (reg:SI 102)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                        (reg:SI 103)
                    ]
                     [
                        (asm_input:SI ("0") random.c:235)
                        (asm_input:SI ("m") random.c:235)
                        (asm_input:SI ("3") random.c:235)
                    ]
                     [] random.c:235))
            (set (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=m") 2 [
                        (reg:SI 102)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                        (reg:SI 103)
                    ]
                     [
                        (asm_input:SI ("0") random.c:235)
                        (asm_input:SI ("m") random.c:235)
                        (asm_input:SI ("3") random.c:235)
                    ]
                     [] random.c:235))
            (set (reg:SI 101 [ ignore3 ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=a") 3 [
                        (reg:SI 102)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                        (reg:SI 103)
                    ]
                     [
                        (asm_input:SI ("0") random.c:235)
                        (asm_input:SI ("m") random.c:235)
                        (asm_input:SI ("3") random.c:235)
                    ]
                     [] random.c:235))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
            (clobber (reg:QI 40 r11))
            (clobber (reg:QI 2 cx))
        ]) random.c:235 -1
     (nil))
(insn 13 12 14 2 (set (reg/v:SI 88 [ ignore1 ])
        (reg:SI 99 [ ignore1 ])) random.c:235 -1
     (nil))
(insn 14 13 15 2 (set (reg/v:SI 89 [ ignore2 ])
        (reg:SI 100 [ ignore2 ])) random.c:235 -1
     (nil))
(insn 15 14 16 2 (set (reg/v:SI 90 [ ignore3 ])
        (reg:SI 101 [ ignore3 ])) random.c:235 -1
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 104)
        (symbol_ref:DI ("unsafe_state") [flags 0x2]  <var_decl 0x2b9c185d5f30 unsafe_state>)) random.c:237 -1
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 105)
        (mem/f/c:DI (plus:DI (reg/f:DI 104)
                (const_int 16 [0x10])) [2 unsafe_state.state+0 S8 A128])) random.c:237 -1
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg/v/f:DI 92 [ ostate ])
                (plus:DI (reg/f:DI 105)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) random.c:237 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 104)
                    (const_int 16 [0x10])) [2 unsafe_state.state+0 S8 A128])
            (const_int -4 [0xfffffffffffffffc]))
        (nil)))
(insn 19 18 20 2 (set (reg:DI 2 cx)
        (symbol_ref:DI ("unsafe_state") [flags 0x2]  <var_decl 0x2b9c185d5f30 unsafe_state>)) random.c:239 -1
     (nil))
(insn 20 19 21 2 (set (reg:DI 1 dx)
        (reg/v:DI 98 [ n ])) random.c:239 -1
     (nil))
(insn 21 20 22 2 (set (reg:DI 4 si)
        (reg/v/f:DI 97 [ arg_state ])) random.c:239 -1
     (nil))
(insn 22 21 23 2 (set (reg:SI 5 di)
        (reg/v:SI 96 [ seed ])) random.c:239 -1
     (nil))
(call_insn 23 22 24 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__initstate_r") [flags 0x41]  <function_decl 0x2b9c1849bbd0 __initstate_r>) [0 __initstate_r S1 A8])
            (const_int 0 [0]))) random.c:239 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__initstate_r") [flags 0x41]  <function_decl 0x2b9c1849bbd0 __initstate_r>)
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 24 23 25 2 (set (reg/v:SI 93 [ ret ])
        (reg:SI 0 ax)) random.c:239 -1
     (nil))
(insn 25 24 26 2 (parallel [
            (set (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; decl %0
	jne 1f
	jmp 24f
	0:	decl %0
	je 24f
	1:	lea %0, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_unlock_wake_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=m") 0 [
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("m") random.c:241)
                    ]
                     [] random.c:241))
            (set (reg:SI 106 [ ignore ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; decl %0
	jne 1f
	jmp 24f
	0:	decl %0
	je 24f
	1:	lea %0, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_unlock_wake_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=&D") 1 [
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("m") random.c:241)
                    ]
                     [] random.c:241))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
            (clobber (reg:QI 40 r11))
            (clobber (reg:QI 2 cx))
            (clobber (reg:QI 0 ax))
        ]) random.c:241 -1
     (nil))
(insn 26 25 27 2 (set (reg/v:SI 94 [ ignore ])
        (reg:SI 106 [ ignore ])) random.c:241 -1
     (nil))
(insn 27 26 28 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 93 [ ret ])
            (const_int -1 [0xffffffffffffffff]))) random.c:243 -1
     (nil))
(jump_insn 28 27 29 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 42)
            (pc))) random.c:243 612 {*jcc_1}
     (int_list:REG_BR_PROB 414 (nil))
 -> 42)
(note 29 28 6 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 6 29 39 4 (set (reg/f:DI 87 [ D.7494 ])
        (reg/v/f:DI 92 [ ostate ])) random.c:243 -1
     (nil))
(jump_insn 39 6 40 4 (set (pc)
        (label_ref 30)) -1
     (nil)
 -> 30)
(barrier 40 39 42)
(code_label 42 40 41 5 5 "" [1 uses])
(note 41 42 7 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 7 41 30 5 (set (reg/f:DI 87 [ D.7494 ])
        (const_int 0 [0])) random.c:243 -1
     (nil))
(code_label 30 7 31 6 4 "" [1 uses])
(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 36 6 (set (reg:DI 95 [ <retval> ])
        (reg/f:DI 87 [ D.7494 ])) random.c:243 -1
     (nil))
(insn 36 32 37 6 (set (reg/i:DI 0 ax)
        (reg:DI 95 [ <retval> ])) random.c:244 -1
     (nil))
(insn 37 36 0 6 (use (reg/i:DI 0 ax)) random.c:244 -1
     (nil))

;; Function __setstate (__setstate, funcdef_no=35, decl_uid=4863, cgraph_uid=38, symbol_order=44)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 28.
Merging block 6 into block 5...
Merged blocks 5 and 6.
Merged 5 and 6 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/v/f:DI 95 [ arg_state ])
        (reg:DI 5 di [ arg_state ])) random.c:258 -1
     (nil))
(note 3 2 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 3 8 2 (set (reg:SI 99)
        (const_int 1 [0x1])) random.c:261 -1
     (nil))
(insn 8 7 9 2 (set (reg:SI 100)
        (const_int 0 [0])) random.c:261 -1
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg:SI 96 [ ignore1 ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=S") 0 [
                        (reg:SI 99)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                        (reg:SI 100)
                    ]
                     [
                        (asm_input:SI ("0") random.c:261)
                        (asm_input:SI ("m") random.c:261)
                        (asm_input:SI ("3") random.c:261)
                    ]
                     [] random.c:261))
            (set (reg:SI 97 [ ignore2 ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=&D") 1 [
                        (reg:SI 99)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                        (reg:SI 100)
                    ]
                     [
                        (asm_input:SI ("0") random.c:261)
                        (asm_input:SI ("m") random.c:261)
                        (asm_input:SI ("3") random.c:261)
                    ]
                     [] random.c:261))
            (set (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=m") 2 [
                        (reg:SI 99)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                        (reg:SI 100)
                    ]
                     [
                        (asm_input:SI ("0") random.c:261)
                        (asm_input:SI ("m") random.c:261)
                        (asm_input:SI ("3") random.c:261)
                    ]
                     [] random.c:261))
            (set (reg:SI 98 [ ignore3 ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=a") 3 [
                        (reg:SI 99)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                        (reg:SI 100)
                    ]
                     [
                        (asm_input:SI ("0") random.c:261)
                        (asm_input:SI ("m") random.c:261)
                        (asm_input:SI ("3") random.c:261)
                    ]
                     [] random.c:261))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
            (clobber (reg:QI 40 r11))
            (clobber (reg:QI 2 cx))
        ]) random.c:261 -1
     (nil))
(insn 10 9 11 2 (set (reg/v:SI 88 [ ignore1 ])
        (reg:SI 96 [ ignore1 ])) random.c:261 -1
     (nil))
(insn 11 10 12 2 (set (reg/v:SI 89 [ ignore2 ])
        (reg:SI 97 [ ignore2 ])) random.c:261 -1
     (nil))
(insn 12 11 13 2 (set (reg/v:SI 90 [ ignore3 ])
        (reg:SI 98 [ ignore3 ])) random.c:261 -1
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 101)
        (symbol_ref:DI ("unsafe_state") [flags 0x2]  <var_decl 0x2b9c185d5f30 unsafe_state>)) random.c:263 -1
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 102)
        (mem/f/c:DI (plus:DI (reg/f:DI 101)
                (const_int 16 [0x10])) [2 unsafe_state.state+0 S8 A128])) random.c:263 -1
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg/v/f:DI 87 [ ostate ])
                (plus:DI (reg/f:DI 102)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) random.c:263 -1
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 101)
                    (const_int 16 [0x10])) [2 unsafe_state.state+0 S8 A128])
            (const_int -4 [0xfffffffffffffffc]))
        (nil)))
(insn 16 15 17 2 (set (reg:DI 4 si)
        (symbol_ref:DI ("unsafe_state") [flags 0x2]  <var_decl 0x2b9c185d5f30 unsafe_state>)) random.c:265 -1
     (nil))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (reg/v/f:DI 95 [ arg_state ])) random.c:265 -1
     (nil))
(call_insn 18 17 19 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__setstate_r") [flags 0x41]  <function_decl 0x2b9c1849bd80 __setstate_r>) [0 __setstate_r S1 A8])
            (const_int 0 [0]))) random.c:265 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__setstate_r") [flags 0x41]  <function_decl 0x2b9c1849bd80 __setstate_r>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 19 18 20 2 (set (reg:SI 92 [ D.7503 ])
        (reg:SI 0 ax)) random.c:265 -1
     (nil))
(insn 20 19 21 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 92 [ D.7503 ])
            (const_int 0 [0]))) random.c:265 -1
     (nil))
(jump_insn 21 20 22 2 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) random.c:265 -1
     (int_list:REG_BR_PROB 9605 (nil))
 -> 23)
(note 22 21 4 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 4 22 23 4 (set (reg/v/f:DI 87 [ ostate ])
        (const_int 0 [0])) random.c:266 -1
     (nil))
(code_label 23 4 24 5 8 "" [1 uses])
(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (parallel [
            (set (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; decl %0
	jne 1f
	jmp 24f
	0:	decl %0
	je 24f
	1:	lea %0, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_unlock_wake_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=m") 0 [
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("m") random.c:268)
                    ]
                     [] random.c:268))
            (set (reg:SI 103 [ ignore ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; decl %0
	jne 1f
	jmp 24f
	0:	decl %0
	je 24f
	1:	lea %0, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_unlock_wake_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=&D") 1 [
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("m") random.c:268)
                    ]
                     [] random.c:268))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
            (clobber (reg:QI 40 r11))
            (clobber (reg:QI 2 cx))
            (clobber (reg:QI 0 ax))
        ]) random.c:268 -1
     (nil))
(insn 26 25 27 5 (set (reg/v:SI 93 [ ignore ])
        (reg:SI 103 [ ignore ])) random.c:268 -1
     (nil))
(insn 27 26 31 5 (set (reg:DI 94 [ <retval> ])
        (reg/v/f:DI 87 [ ostate ])) random.c:270 -1
     (nil))
(insn 31 27 32 5 (set (reg/i:DI 0 ax)
        (reg:DI 94 [ <retval> ])) random.c:271 -1
     (nil))
(insn 32 31 0 5 (use (reg/i:DI 0 ax)) random.c:271 -1
     (nil))

;; Function __random (__random, funcdef_no=36, decl_uid=4855, cgraph_uid=40, symbol_order=46)

Partition 0: size 4 align 4
	retval

;; Generating RTL for gimple basic block 2


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 20.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 97)
        (const_int 1 [0x1])) random.c:291 -1
     (nil))
(insn 6 5 7 2 (set (reg:SI 98)
        (const_int 0 [0])) random.c:291 -1
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg:SI 94 [ ignore1 ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=S") 0 [
                        (reg:SI 97)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                        (reg:SI 98)
                    ]
                     [
                        (asm_input:SI ("0") random.c:291)
                        (asm_input:SI ("m") random.c:291)
                        (asm_input:SI ("3") random.c:291)
                    ]
                     [] random.c:291))
            (set (reg:SI 95 [ ignore2 ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=&D") 1 [
                        (reg:SI 97)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                        (reg:SI 98)
                    ]
                     [
                        (asm_input:SI ("0") random.c:291)
                        (asm_input:SI ("m") random.c:291)
                        (asm_input:SI ("3") random.c:291)
                    ]
                     [] random.c:291))
            (set (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=m") 2 [
                        (reg:SI 97)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                        (reg:SI 98)
                    ]
                     [
                        (asm_input:SI ("0") random.c:291)
                        (asm_input:SI ("m") random.c:291)
                        (asm_input:SI ("3") random.c:291)
                    ]
                     [] random.c:291))
            (set (reg:SI 96 [ ignore3 ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; cmpxchgl %4, %2
	jnz 1f
	jmp 24f
0:	cmpxchgl %4, %2
	jz 24f
	1:	lea %2, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_lock_wait_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=a") 3 [
                        (reg:SI 97)
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                        (reg:SI 98)
                    ]
                     [
                        (asm_input:SI ("0") random.c:291)
                        (asm_input:SI ("m") random.c:291)
                        (asm_input:SI ("3") random.c:291)
                    ]
                     [] random.c:291))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
            (clobber (reg:QI 40 r11))
            (clobber (reg:QI 2 cx))
        ]) random.c:291 -1
     (nil))
(insn 8 7 9 2 (set (reg/v:SI 87 [ ignore1 ])
        (reg:SI 94 [ ignore1 ])) random.c:291 -1
     (nil))
(insn 9 8 10 2 (set (reg/v:SI 88 [ ignore2 ])
        (reg:SI 95 [ ignore2 ])) random.c:291 -1
     (nil))
(insn 10 9 11 2 (set (reg/v:SI 89 [ ignore3 ])
        (reg:SI 96 [ ignore3 ])) random.c:291 -1
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg:DI 99)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) random.c:293 -1
     (nil))
(insn 12 11 13 2 (set (reg:DI 4 si)
        (reg:DI 99)) random.c:293 -1
     (nil))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (symbol_ref:DI ("unsafe_state") [flags 0x2]  <var_decl 0x2b9c185d5f30 unsafe_state>)) random.c:293 -1
     (nil))
(call_insn 14 13 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__random_r") [flags 0x41]  <function_decl 0x2b9c1849b798 __random_r>) [0 __random_r S1 A8])
            (const_int 0 [0]))) random.c:293 -1
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__random_r") [flags 0x41]  <function_decl 0x2b9c1849b798 __random_r>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 15 14 16 2 (parallel [
            (set (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; decl %0
	jne 1f
	jmp 24f
	0:	decl %0
	je 24f
	1:	lea %0, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_unlock_wake_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=m") 0 [
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("m") random.c:295)
                    ]
                     [] random.c:295))
            (set (reg:SI 100 [ ignore ])
                (asm_operands/v:SI ("cmpl $0, __libc_multiple_threads(%%rip)
	je 0f
	lock; decl %0
	jne 1f
	jmp 24f
	0:	decl %0
	je 24f
	1:	lea %0, %%rdi
2:	sub $128, %%rsp
.cfi_adjust_cfa_offset 128
3:	callq __lll_unlock_wake_private
4:	add $128, %%rsp
.cfi_adjust_cfa_offset -128
24:") ("=&D") 1 [
                        (mem/c:SI (symbol_ref:DI ("lock") [flags 0x2]  <var_decl 0x2b9c18637000 lock>) [3 lock+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("m") random.c:295)
                    ]
                     [] random.c:295))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
            (clobber (reg:QI 40 r11))
            (clobber (reg:QI 2 cx))
            (clobber (reg:QI 0 ax))
        ]) random.c:295 -1
     (nil))
(insn 16 15 17 2 (set (reg/v:SI 90 [ ignore ])
        (reg:SI 100 [ ignore ])) random.c:295 -1
     (nil))
(insn 17 16 18 2 (set (reg:SI 101)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 retval+0 S4 A32])) random.c:297 -1
     (nil))
(insn 18 17 19 2 (set (reg:DI 92 [ D.7511 ])
        (sign_extend:DI (reg:SI 101))) random.c:297 -1
     (nil))
(insn 19 18 23 2 (set (reg:DI 93 [ <retval> ])
        (reg:DI 92 [ D.7511 ])) random.c:297 -1
     (nil))
(insn 23 19 24 2 (set (reg/i:DI 0 ax)
        (reg:DI 93 [ <retval> ])) random.c:298 -1
     (nil))
(insn 24 23 0 2 (use (reg/i:DI 0 ax)) random.c:298 -1
     (nil))
